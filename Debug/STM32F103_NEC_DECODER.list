
STM32F103_NEC_DECODER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a78  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001550  08003b84  08003b84  00013b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050d4  080050d4  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080050d4  080050d4  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050d4  080050d4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050d4  080050d4  000150d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050d8  080050d8  000150d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080050dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000538  20000080  0800515c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b8  0800515c  000205b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c67f  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d3a  00000000  00000000  0002c728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  0002e468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  0002f1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175f5  00000000  00000000  0002fe38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee7e  00000000  00000000  0004742d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aea8  00000000  00000000  000562ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1153  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003be0  00000000  00000000  000e11a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b6c 	.word	0x08003b6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08003b6c 	.word	0x08003b6c

0800014c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a15      	ldr	r2, [pc, #84]	; (80001b0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800015a:	4293      	cmp	r3, r2
 800015c:	d123      	bne.n	80001a6 <HAL_TIM_PeriodElapsedCallback+0x5a>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800015e:	2201      	movs	r2, #1
 8000160:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000164:	4813      	ldr	r0, [pc, #76]	; (80001b4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000166:	f001 fa94 	bl	8001692 <HAL_GPIO_WritePin>
		NEC1.addr = 0;
 800016a:	4b13      	ldr	r3, [pc, #76]	; (80001b8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800016c:	2200      	movs	r2, #0
 800016e:	701a      	strb	r2, [r3, #0]
		NEC1.addr_inv = 0;
 8000170:	4b11      	ldr	r3, [pc, #68]	; (80001b8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000172:	2200      	movs	r2, #0
 8000174:	705a      	strb	r2, [r3, #1]
		NEC1.cmd = 0;
 8000176:	4b10      	ldr	r3, [pc, #64]	; (80001b8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000178:	2200      	movs	r2, #0
 800017a:	709a      	strb	r2, [r3, #2]
		NEC1.cmd_inv = 0;
 800017c:	4b0e      	ldr	r3, [pc, #56]	; (80001b8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800017e:	2200      	movs	r2, #0
 8000180:	70da      	strb	r2, [r3, #3]
		NEC1.complet = 0;
 8000182:	4b0d      	ldr	r3, [pc, #52]	; (80001b8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000184:	2200      	movs	r2, #0
 8000186:	72da      	strb	r2, [r3, #11]
		NEC1.gpio = 0;
 8000188:	4b0b      	ldr	r3, [pc, #44]	; (80001b8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800018a:	2200      	movs	r2, #0
 800018c:	719a      	strb	r2, [r3, #6]
		NEC1.i = 0;
 800018e:	4b0a      	ldr	r3, [pc, #40]	; (80001b8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000190:	2200      	movs	r2, #0
 8000192:	711a      	strb	r2, [r3, #4]
		NEC1.init_seq = 0;
 8000194:	4b08      	ldr	r3, [pc, #32]	; (80001b8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000196:	2200      	movs	r2, #0
 8000198:	715a      	strb	r2, [r3, #5]
		NEC1.repeat = 0;
 800019a:	4b07      	ldr	r3, [pc, #28]	; (80001b8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800019c:	2200      	movs	r2, #0
 800019e:	729a      	strb	r2, [r3, #10]
		NEC1.complet = 0;
 80001a0:	4b05      	ldr	r3, [pc, #20]	; (80001b8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	72da      	strb	r2, [r3, #11]
		MAXIM(&hspi1, 3, NEC1.cmd);
		MAXIM(&hspi1, 4, NEC1.cmd_inv);
		MAXIM(&hspi1, 5, NEC1.repeat);
		*/
	}
}
 80001a6:	bf00      	nop
 80001a8:	3708      	adds	r7, #8
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40012c00 	.word	0x40012c00
 80001b4:	40011000 	.word	0x40011000
 80001b8:	200000f0 	.word	0x200000f0

080001bc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	4603      	mov	r3, r0
 80001c4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == NEC_Pin) {
 80001c6:	88fb      	ldrh	r3, [r7, #6]
 80001c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001cc:	f040 814f 	bne.w	800046e <HAL_GPIO_EXTI_Callback+0x2b2>
		NEC1.count = __HAL_TIM_GET_COUNTER(&htim1);
 80001d0:	4b94      	ldr	r3, [pc, #592]	; (8000424 <HAL_GPIO_EXTI_Callback+0x268>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001d6:	b29a      	uxth	r2, r3
 80001d8:	4b93      	ldr	r3, [pc, #588]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 80001da:	811a      	strh	r2, [r3, #8]
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 80001dc:	4b91      	ldr	r3, [pc, #580]	; (8000424 <HAL_GPIO_EXTI_Callback+0x268>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	2200      	movs	r2, #0
 80001e2:	625a      	str	r2, [r3, #36]	; 0x24
		NEC1.gpio = HAL_GPIO_ReadPin(NEC_GPIO_Port, NEC_Pin);
 80001e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001e8:	4890      	ldr	r0, [pc, #576]	; (800042c <HAL_GPIO_EXTI_Callback+0x270>)
 80001ea:	f001 fa3b 	bl	8001664 <HAL_GPIO_ReadPin>
 80001ee:	4603      	mov	r3, r0
 80001f0:	461a      	mov	r2, r3
 80001f2:	4b8d      	ldr	r3, [pc, #564]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 80001f4:	719a      	strb	r2, [r3, #6]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80001f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001fa:	488d      	ldr	r0, [pc, #564]	; (8000430 <HAL_GPIO_EXTI_Callback+0x274>)
 80001fc:	f001 fa61 	bl	80016c2 <HAL_GPIO_TogglePin>
#ifdef DEBUG
		len = sprintf(BUFF, "DEBUG :\t%u\t%u\t%u\n\0", NEC1.i, NEC1.gpio, NEC1.count);
		CDC_Transmit_FS(BUFF, len);
#endif

		if (NEC1.gpio && NEC1.count > 850 && NEC1.count < 1000) {
 8000200:	4b89      	ldr	r3, [pc, #548]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000202:	799b      	ldrb	r3, [r3, #6]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d010      	beq.n	800022a <HAL_GPIO_EXTI_Callback+0x6e>
 8000208:	4b87      	ldr	r3, [pc, #540]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 800020a:	891b      	ldrh	r3, [r3, #8]
 800020c:	f240 3252 	movw	r2, #850	; 0x352
 8000210:	4293      	cmp	r3, r2
 8000212:	d90a      	bls.n	800022a <HAL_GPIO_EXTI_Callback+0x6e>
 8000214:	4b84      	ldr	r3, [pc, #528]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000216:	891b      	ldrh	r3, [r3, #8]
 8000218:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800021c:	d205      	bcs.n	800022a <HAL_GPIO_EXTI_Callback+0x6e>
			NEC1.init_seq = 1;
 800021e:	4b82      	ldr	r3, [pc, #520]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000220:	2201      	movs	r2, #1
 8000222:	715a      	strb	r2, [r3, #5]
			NEC1.complet = 0;
 8000224:	4b80      	ldr	r3, [pc, #512]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000226:	2200      	movs	r2, #0
 8000228:	72da      	strb	r2, [r3, #11]
		}

		if (!NEC1.gpio && NEC1.count > 420 && NEC1.count < 480
 800022a:	4b7f      	ldr	r3, [pc, #508]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 800022c:	799b      	ldrb	r3, [r3, #6]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d116      	bne.n	8000260 <HAL_GPIO_EXTI_Callback+0xa4>
 8000232:	4b7d      	ldr	r3, [pc, #500]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000234:	891b      	ldrh	r3, [r3, #8]
 8000236:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800023a:	d911      	bls.n	8000260 <HAL_GPIO_EXTI_Callback+0xa4>
 800023c:	4b7a      	ldr	r3, [pc, #488]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 800023e:	891b      	ldrh	r3, [r3, #8]
 8000240:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000244:	d20c      	bcs.n	8000260 <HAL_GPIO_EXTI_Callback+0xa4>
				&& NEC1.init_seq) {
 8000246:	4b78      	ldr	r3, [pc, #480]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000248:	795b      	ldrb	r3, [r3, #5]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d008      	beq.n	8000260 <HAL_GPIO_EXTI_Callback+0xa4>
			NEC1.i = -1;
 800024e:	4b76      	ldr	r3, [pc, #472]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000250:	22ff      	movs	r2, #255	; 0xff
 8000252:	711a      	strb	r2, [r3, #4]
			NEC1.repeat = 0;
 8000254:	4b74      	ldr	r3, [pc, #464]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000256:	2200      	movs	r2, #0
 8000258:	729a      	strb	r2, [r3, #10]
			NEC1.init_seq = 0;
 800025a:	4b73      	ldr	r3, [pc, #460]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 800025c:	2200      	movs	r2, #0
 800025e:	715a      	strb	r2, [r3, #5]
		}

		if (!NEC1.gpio && NEC1.count > 200 && NEC1.count < 260
 8000260:	4b71      	ldr	r3, [pc, #452]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000262:	799b      	ldrb	r3, [r3, #6]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d11b      	bne.n	80002a0 <HAL_GPIO_EXTI_Callback+0xe4>
 8000268:	4b6f      	ldr	r3, [pc, #444]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 800026a:	891b      	ldrh	r3, [r3, #8]
 800026c:	2bc8      	cmp	r3, #200	; 0xc8
 800026e:	d917      	bls.n	80002a0 <HAL_GPIO_EXTI_Callback+0xe4>
 8000270:	4b6d      	ldr	r3, [pc, #436]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000272:	891b      	ldrh	r3, [r3, #8]
 8000274:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000278:	d212      	bcs.n	80002a0 <HAL_GPIO_EXTI_Callback+0xe4>
				&& NEC1.init_seq) {
 800027a:	4b6b      	ldr	r3, [pc, #428]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 800027c:	795b      	ldrb	r3, [r3, #5]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d00e      	beq.n	80002a0 <HAL_GPIO_EXTI_Callback+0xe4>
			NEC1.i = -1;
 8000282:	4b69      	ldr	r3, [pc, #420]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000284:	22ff      	movs	r2, #255	; 0xff
 8000286:	711a      	strb	r2, [r3, #4]
			NEC1.init_seq = 0;
 8000288:	4b67      	ldr	r3, [pc, #412]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 800028a:	2200      	movs	r2, #0
 800028c:	715a      	strb	r2, [r3, #5]
			NEC1.repeat++;
 800028e:	4b66      	ldr	r3, [pc, #408]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000290:	7a9b      	ldrb	r3, [r3, #10]
 8000292:	3301      	adds	r3, #1
 8000294:	b2da      	uxtb	r2, r3
 8000296:	4b64      	ldr	r3, [pc, #400]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000298:	729a      	strb	r2, [r3, #10]
			NEC1.complet = 1;
 800029a:	4b63      	ldr	r3, [pc, #396]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 800029c:	2201      	movs	r2, #1
 800029e:	72da      	strb	r2, [r3, #11]
		}

		if (NEC1.gpio && NEC1.count > 40 && NEC1.count < 70) {
 80002a0:	4b61      	ldr	r3, [pc, #388]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 80002a2:	799b      	ldrb	r3, [r3, #6]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d00d      	beq.n	80002c4 <HAL_GPIO_EXTI_Callback+0x108>
 80002a8:	4b5f      	ldr	r3, [pc, #380]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 80002aa:	891b      	ldrh	r3, [r3, #8]
 80002ac:	2b28      	cmp	r3, #40	; 0x28
 80002ae:	d909      	bls.n	80002c4 <HAL_GPIO_EXTI_Callback+0x108>
 80002b0:	4b5d      	ldr	r3, [pc, #372]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 80002b2:	891b      	ldrh	r3, [r3, #8]
 80002b4:	2b45      	cmp	r3, #69	; 0x45
 80002b6:	d805      	bhi.n	80002c4 <HAL_GPIO_EXTI_Callback+0x108>
			NEC1.i++;
 80002b8:	4b5b      	ldr	r3, [pc, #364]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 80002ba:	791b      	ldrb	r3, [r3, #4]
 80002bc:	3301      	adds	r3, #1
 80002be:	b2da      	uxtb	r2, r3
 80002c0:	4b59      	ldr	r3, [pc, #356]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 80002c2:	711a      	strb	r2, [r3, #4]
		}

		if (!NEC1.gpio && NEC1.count > 40 && NEC1.count < 180) {
 80002c4:	4b58      	ldr	r3, [pc, #352]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 80002c6:	799b      	ldrb	r3, [r3, #6]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	f040 80c6 	bne.w	800045a <HAL_GPIO_EXTI_Callback+0x29e>
 80002ce:	4b56      	ldr	r3, [pc, #344]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 80002d0:	891b      	ldrh	r3, [r3, #8]
 80002d2:	2b28      	cmp	r3, #40	; 0x28
 80002d4:	f240 80c1 	bls.w	800045a <HAL_GPIO_EXTI_Callback+0x29e>
 80002d8:	4b53      	ldr	r3, [pc, #332]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 80002da:	891b      	ldrh	r3, [r3, #8]
 80002dc:	2bb3      	cmp	r3, #179	; 0xb3
 80002de:	f200 80bc 	bhi.w	800045a <HAL_GPIO_EXTI_Callback+0x29e>
			switch (NEC1.i / 8) {
 80002e2:	4b51      	ldr	r3, [pc, #324]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 80002e4:	791b      	ldrb	r3, [r3, #4]
 80002e6:	08db      	lsrs	r3, r3, #3
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	2b03      	cmp	r3, #3
 80002ec:	f200 80b7 	bhi.w	800045e <HAL_GPIO_EXTI_Callback+0x2a2>
 80002f0:	a201      	add	r2, pc, #4	; (adr r2, 80002f8 <HAL_GPIO_EXTI_Callback+0x13c>)
 80002f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002f6:	bf00      	nop
 80002f8:	08000309 	.word	0x08000309
 80002fc:	08000359 	.word	0x08000359
 8000300:	080003a9 	.word	0x080003a9
 8000304:	080003f9 	.word	0x080003f9
			case 0:
				if (NEC1.count > 100) {
 8000308:	4b47      	ldr	r3, [pc, #284]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 800030a:	891b      	ldrh	r3, [r3, #8]
 800030c:	2b64      	cmp	r3, #100	; 0x64
 800030e:	d910      	bls.n	8000332 <HAL_GPIO_EXTI_Callback+0x176>
					NEC1.addr |= (1 << (NEC1.i % 8));
 8000310:	4b45      	ldr	r3, [pc, #276]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	b25a      	sxtb	r2, r3
 8000316:	4b44      	ldr	r3, [pc, #272]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000318:	791b      	ldrb	r3, [r3, #4]
 800031a:	f003 0307 	and.w	r3, r3, #7
 800031e:	2101      	movs	r1, #1
 8000320:	fa01 f303 	lsl.w	r3, r1, r3
 8000324:	b25b      	sxtb	r3, r3
 8000326:	4313      	orrs	r3, r2
 8000328:	b25b      	sxtb	r3, r3
 800032a:	b2da      	uxtb	r2, r3
 800032c:	4b3e      	ldr	r3, [pc, #248]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 800032e:	701a      	strb	r2, [r3, #0]
				} else {
					NEC1.addr &= ~(1 << (NEC1.i % 8));
				}
				break;
 8000330:	e096      	b.n	8000460 <HAL_GPIO_EXTI_Callback+0x2a4>
					NEC1.addr &= ~(1 << (NEC1.i % 8));
 8000332:	4b3d      	ldr	r3, [pc, #244]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	b25a      	sxtb	r2, r3
 8000338:	4b3b      	ldr	r3, [pc, #236]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 800033a:	791b      	ldrb	r3, [r3, #4]
 800033c:	f003 0307 	and.w	r3, r3, #7
 8000340:	2101      	movs	r1, #1
 8000342:	fa01 f303 	lsl.w	r3, r1, r3
 8000346:	b25b      	sxtb	r3, r3
 8000348:	43db      	mvns	r3, r3
 800034a:	b25b      	sxtb	r3, r3
 800034c:	4013      	ands	r3, r2
 800034e:	b25b      	sxtb	r3, r3
 8000350:	b2da      	uxtb	r2, r3
 8000352:	4b35      	ldr	r3, [pc, #212]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000354:	701a      	strb	r2, [r3, #0]
				break;
 8000356:	e083      	b.n	8000460 <HAL_GPIO_EXTI_Callback+0x2a4>
			case 1:
				if (NEC1.count > 100) {
 8000358:	4b33      	ldr	r3, [pc, #204]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 800035a:	891b      	ldrh	r3, [r3, #8]
 800035c:	2b64      	cmp	r3, #100	; 0x64
 800035e:	d910      	bls.n	8000382 <HAL_GPIO_EXTI_Callback+0x1c6>
					NEC1.addr_inv |= (1 << (NEC1.i % 8));
 8000360:	4b31      	ldr	r3, [pc, #196]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000362:	785b      	ldrb	r3, [r3, #1]
 8000364:	b25a      	sxtb	r2, r3
 8000366:	4b30      	ldr	r3, [pc, #192]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000368:	791b      	ldrb	r3, [r3, #4]
 800036a:	f003 0307 	and.w	r3, r3, #7
 800036e:	2101      	movs	r1, #1
 8000370:	fa01 f303 	lsl.w	r3, r1, r3
 8000374:	b25b      	sxtb	r3, r3
 8000376:	4313      	orrs	r3, r2
 8000378:	b25b      	sxtb	r3, r3
 800037a:	b2da      	uxtb	r2, r3
 800037c:	4b2a      	ldr	r3, [pc, #168]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 800037e:	705a      	strb	r2, [r3, #1]
				} else {
					NEC1.addr_inv &= ~(1 << (NEC1.i % 8));
				}
				break;
 8000380:	e06e      	b.n	8000460 <HAL_GPIO_EXTI_Callback+0x2a4>
					NEC1.addr_inv &= ~(1 << (NEC1.i % 8));
 8000382:	4b29      	ldr	r3, [pc, #164]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000384:	785b      	ldrb	r3, [r3, #1]
 8000386:	b25a      	sxtb	r2, r3
 8000388:	4b27      	ldr	r3, [pc, #156]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 800038a:	791b      	ldrb	r3, [r3, #4]
 800038c:	f003 0307 	and.w	r3, r3, #7
 8000390:	2101      	movs	r1, #1
 8000392:	fa01 f303 	lsl.w	r3, r1, r3
 8000396:	b25b      	sxtb	r3, r3
 8000398:	43db      	mvns	r3, r3
 800039a:	b25b      	sxtb	r3, r3
 800039c:	4013      	ands	r3, r2
 800039e:	b25b      	sxtb	r3, r3
 80003a0:	b2da      	uxtb	r2, r3
 80003a2:	4b21      	ldr	r3, [pc, #132]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 80003a4:	705a      	strb	r2, [r3, #1]
				break;
 80003a6:	e05b      	b.n	8000460 <HAL_GPIO_EXTI_Callback+0x2a4>
			case 2:
				if (NEC1.count > 100) {
 80003a8:	4b1f      	ldr	r3, [pc, #124]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 80003aa:	891b      	ldrh	r3, [r3, #8]
 80003ac:	2b64      	cmp	r3, #100	; 0x64
 80003ae:	d910      	bls.n	80003d2 <HAL_GPIO_EXTI_Callback+0x216>
					NEC1.cmd |= (1 << (NEC1.i % 8));
 80003b0:	4b1d      	ldr	r3, [pc, #116]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 80003b2:	789b      	ldrb	r3, [r3, #2]
 80003b4:	b25a      	sxtb	r2, r3
 80003b6:	4b1c      	ldr	r3, [pc, #112]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 80003b8:	791b      	ldrb	r3, [r3, #4]
 80003ba:	f003 0307 	and.w	r3, r3, #7
 80003be:	2101      	movs	r1, #1
 80003c0:	fa01 f303 	lsl.w	r3, r1, r3
 80003c4:	b25b      	sxtb	r3, r3
 80003c6:	4313      	orrs	r3, r2
 80003c8:	b25b      	sxtb	r3, r3
 80003ca:	b2da      	uxtb	r2, r3
 80003cc:	4b16      	ldr	r3, [pc, #88]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 80003ce:	709a      	strb	r2, [r3, #2]
				} else {
					NEC1.cmd &= ~(1 << (NEC1.i % 8));
				}
				break;
 80003d0:	e046      	b.n	8000460 <HAL_GPIO_EXTI_Callback+0x2a4>
					NEC1.cmd &= ~(1 << (NEC1.i % 8));
 80003d2:	4b15      	ldr	r3, [pc, #84]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 80003d4:	789b      	ldrb	r3, [r3, #2]
 80003d6:	b25a      	sxtb	r2, r3
 80003d8:	4b13      	ldr	r3, [pc, #76]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 80003da:	791b      	ldrb	r3, [r3, #4]
 80003dc:	f003 0307 	and.w	r3, r3, #7
 80003e0:	2101      	movs	r1, #1
 80003e2:	fa01 f303 	lsl.w	r3, r1, r3
 80003e6:	b25b      	sxtb	r3, r3
 80003e8:	43db      	mvns	r3, r3
 80003ea:	b25b      	sxtb	r3, r3
 80003ec:	4013      	ands	r3, r2
 80003ee:	b25b      	sxtb	r3, r3
 80003f0:	b2da      	uxtb	r2, r3
 80003f2:	4b0d      	ldr	r3, [pc, #52]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 80003f4:	709a      	strb	r2, [r3, #2]
				break;
 80003f6:	e033      	b.n	8000460 <HAL_GPIO_EXTI_Callback+0x2a4>
			case 3:
				if (NEC1.count > 100) {
 80003f8:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 80003fa:	891b      	ldrh	r3, [r3, #8]
 80003fc:	2b64      	cmp	r3, #100	; 0x64
 80003fe:	d919      	bls.n	8000434 <HAL_GPIO_EXTI_Callback+0x278>
					NEC1.cmd_inv |= (1 << (NEC1.i % 8));
 8000400:	4b09      	ldr	r3, [pc, #36]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000402:	78db      	ldrb	r3, [r3, #3]
 8000404:	b25a      	sxtb	r2, r3
 8000406:	4b08      	ldr	r3, [pc, #32]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000408:	791b      	ldrb	r3, [r3, #4]
 800040a:	f003 0307 	and.w	r3, r3, #7
 800040e:	2101      	movs	r1, #1
 8000410:	fa01 f303 	lsl.w	r3, r1, r3
 8000414:	b25b      	sxtb	r3, r3
 8000416:	4313      	orrs	r3, r2
 8000418:	b25b      	sxtb	r3, r3
 800041a:	b2da      	uxtb	r2, r3
 800041c:	4b02      	ldr	r3, [pc, #8]	; (8000428 <HAL_GPIO_EXTI_Callback+0x26c>)
 800041e:	70da      	strb	r2, [r3, #3]
				} else {
					NEC1.cmd_inv &= ~(1 << (NEC1.i % 8));
				}
				break;
 8000420:	e01e      	b.n	8000460 <HAL_GPIO_EXTI_Callback+0x2a4>
 8000422:	bf00      	nop
 8000424:	20000150 	.word	0x20000150
 8000428:	200000f0 	.word	0x200000f0
 800042c:	40010c00 	.word	0x40010c00
 8000430:	40011000 	.word	0x40011000
					NEC1.cmd_inv &= ~(1 << (NEC1.i % 8));
 8000434:	4b10      	ldr	r3, [pc, #64]	; (8000478 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000436:	78db      	ldrb	r3, [r3, #3]
 8000438:	b25a      	sxtb	r2, r3
 800043a:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800043c:	791b      	ldrb	r3, [r3, #4]
 800043e:	f003 0307 	and.w	r3, r3, #7
 8000442:	2101      	movs	r1, #1
 8000444:	fa01 f303 	lsl.w	r3, r1, r3
 8000448:	b25b      	sxtb	r3, r3
 800044a:	43db      	mvns	r3, r3
 800044c:	b25b      	sxtb	r3, r3
 800044e:	4013      	ands	r3, r2
 8000450:	b25b      	sxtb	r3, r3
 8000452:	b2da      	uxtb	r2, r3
 8000454:	4b08      	ldr	r3, [pc, #32]	; (8000478 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000456:	70da      	strb	r2, [r3, #3]
				break;
 8000458:	e002      	b.n	8000460 <HAL_GPIO_EXTI_Callback+0x2a4>
			default:
				break;
			}
		}
 800045a:	bf00      	nop
 800045c:	e000      	b.n	8000460 <HAL_GPIO_EXTI_Callback+0x2a4>
				break;
 800045e:	bf00      	nop

		if (NEC1.i == 32) {
 8000460:	4b05      	ldr	r3, [pc, #20]	; (8000478 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000462:	791b      	ldrb	r3, [r3, #4]
 8000464:	2b20      	cmp	r3, #32
 8000466:	d102      	bne.n	800046e <HAL_GPIO_EXTI_Callback+0x2b2>
			NEC1.complet = 1;
 8000468:	4b03      	ldr	r3, [pc, #12]	; (8000478 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800046a:	2201      	movs	r2, #1
 800046c:	72da      	strb	r2, [r3, #11]
		}
	}
}
 800046e:	bf00      	nop
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	200000f0 	.word	0x200000f0

0800047c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000480:	f000 fdd8 	bl	8001034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000484:	f000 f86e 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000488:	f000 f932 	bl	80006f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800048c:	f000 f8b0 	bl	80005f0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000490:	f000 f8dc 	bl	800064c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000494:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000498:	4827      	ldr	r0, [pc, #156]	; (8000538 <main+0xbc>)
 800049a:	f001 f912 	bl	80016c2 <HAL_GPIO_TogglePin>
  HAL_TIM_Base_Start_IT(&htim1);
 800049e:	4827      	ldr	r0, [pc, #156]	; (800053c <main+0xc0>)
 80004a0:	f002 fb0e 	bl	8002ac0 <HAL_TIM_Base_Start_IT>


  SSD1306_Init();  // initialise
 80004a4:	f000 f99a 	bl	80007dc <SSD1306_Init>

  SSD1306_GotoXY (0,0);
 80004a8:	2100      	movs	r1, #0
 80004aa:	2000      	movs	r0, #0
 80004ac:	f000 fafe 	bl	8000aac <SSD1306_GotoXY>
  SSD1306_Puts ("HELLO", &Font_11x18, 1);
 80004b0:	2201      	movs	r2, #1
 80004b2:	4923      	ldr	r1, [pc, #140]	; (8000540 <main+0xc4>)
 80004b4:	4823      	ldr	r0, [pc, #140]	; (8000544 <main+0xc8>)
 80004b6:	f000 fb8f 	bl	8000bd8 <SSD1306_Puts>
  SSD1306_GotoXY (10, 30);
 80004ba:	211e      	movs	r1, #30
 80004bc:	200a      	movs	r0, #10
 80004be:	f000 faf5 	bl	8000aac <SSD1306_GotoXY>
  SSD1306_Puts ("  WORLD :)", &Font_11x18, 1);
 80004c2:	2201      	movs	r2, #1
 80004c4:	491e      	ldr	r1, [pc, #120]	; (8000540 <main+0xc4>)
 80004c6:	4820      	ldr	r0, [pc, #128]	; (8000548 <main+0xcc>)
 80004c8:	f000 fb86 	bl	8000bd8 <SSD1306_Puts>
  SSD1306_UpdateScreen(); //display
 80004cc:	f000 fa4a 	bl	8000964 <SSD1306_UpdateScreen>

  HAL_Delay (2000);
 80004d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004d4:	f000 fe10 	bl	80010f8 <HAL_Delay>
  SSD1306_Clear();
 80004d8:	f000 fba3 	bl	8000c22 <SSD1306_Clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (!NEC1.repeat)
 80004dc:	4b1b      	ldr	r3, [pc, #108]	; (800054c <main+0xd0>)
 80004de:	7a9b      	ldrb	r3, [r3, #10]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d10b      	bne.n	80004fc <main+0x80>
	  {
		  len = sprintf(BUFF,
							"CMD:%x", NEC1.cmd);
 80004e4:	4b19      	ldr	r3, [pc, #100]	; (800054c <main+0xd0>)
 80004e6:	789b      	ldrb	r3, [r3, #2]
		  len = sprintf(BUFF,
 80004e8:	461a      	mov	r2, r3
 80004ea:	4919      	ldr	r1, [pc, #100]	; (8000550 <main+0xd4>)
 80004ec:	4819      	ldr	r0, [pc, #100]	; (8000554 <main+0xd8>)
 80004ee:	f002 fec3 	bl	8003278 <siprintf>
 80004f2:	4603      	mov	r3, r0
 80004f4:	b2da      	uxtb	r2, r3
 80004f6:	4b18      	ldr	r3, [pc, #96]	; (8000558 <main+0xdc>)
 80004f8:	701a      	strb	r2, [r3, #0]
 80004fa:	e00a      	b.n	8000512 <main+0x96>
	  }
	  else
	  {
		  len = sprintf(BUFF, "Repeat : %d\n", NEC1.repeat);
 80004fc:	4b13      	ldr	r3, [pc, #76]	; (800054c <main+0xd0>)
 80004fe:	7a9b      	ldrb	r3, [r3, #10]
 8000500:	461a      	mov	r2, r3
 8000502:	4916      	ldr	r1, [pc, #88]	; (800055c <main+0xe0>)
 8000504:	4813      	ldr	r0, [pc, #76]	; (8000554 <main+0xd8>)
 8000506:	f002 feb7 	bl	8003278 <siprintf>
 800050a:	4603      	mov	r3, r0
 800050c:	b2da      	uxtb	r2, r3
 800050e:	4b12      	ldr	r3, [pc, #72]	; (8000558 <main+0xdc>)
 8000510:	701a      	strb	r2, [r3, #0]
	  }
	  SSD1306_GotoXY (0,0);
 8000512:	2100      	movs	r1, #0
 8000514:	2000      	movs	r0, #0
 8000516:	f000 fac9 	bl	8000aac <SSD1306_GotoXY>
	  SSD1306_Puts (BUFF, &Font_7x10, 1);
 800051a:	2201      	movs	r2, #1
 800051c:	4910      	ldr	r1, [pc, #64]	; (8000560 <main+0xe4>)
 800051e:	480d      	ldr	r0, [pc, #52]	; (8000554 <main+0xd8>)
 8000520:	f000 fb5a 	bl	8000bd8 <SSD1306_Puts>
	  SSD1306_UpdateScreen(); //display
 8000524:	f000 fa1e 	bl	8000964 <SSD1306_UpdateScreen>

	  HAL_Delay (2000);
 8000528:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800052c:	f000 fde4 	bl	80010f8 <HAL_Delay>
	  SSD1306_Clear();
 8000530:	f000 fb77 	bl	8000c22 <SSD1306_Clear>
	  if (!NEC1.repeat)
 8000534:	e7d2      	b.n	80004dc <main+0x60>
 8000536:	bf00      	nop
 8000538:	40011000 	.word	0x40011000
 800053c:	20000150 	.word	0x20000150
 8000540:	20000008 	.word	0x20000008
 8000544:	08003b84 	.word	0x08003b84
 8000548:	08003b8c 	.word	0x08003b8c
 800054c:	200000f0 	.word	0x200000f0
 8000550:	08003b98 	.word	0x08003b98
 8000554:	200000a0 	.word	0x200000a0
 8000558:	2000009c 	.word	0x2000009c
 800055c:	08003ba0 	.word	0x08003ba0
 8000560:	20000000 	.word	0x20000000

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b090      	sub	sp, #64	; 0x40
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0318 	add.w	r3, r7, #24
 800056e:	2228      	movs	r2, #40	; 0x28
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f002 fe78 	bl	8003268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000586:	2301      	movs	r3, #1
 8000588:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000594:	2301      	movs	r3, #1
 8000596:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000598:	2302      	movs	r3, #2
 800059a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005a2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0318 	add.w	r3, r7, #24
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 fe31 	bl	8002214 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005b8:	f000 f90a 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2302      	movs	r3, #2
 80005c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2102      	movs	r1, #2
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 f89e 	bl	8002718 <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005e2:	f000 f8f5 	bl	80007d0 <Error_Handler>
  }
}
 80005e6:	bf00      	nop
 80005e8:	3740      	adds	r7, #64	; 0x40
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_I2C1_Init+0x50>)
 80005f6:	4a13      	ldr	r2, [pc, #76]	; (8000644 <MX_I2C1_Init+0x54>)
 80005f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_I2C1_Init+0x50>)
 80005fc:	4a12      	ldr	r2, [pc, #72]	; (8000648 <MX_I2C1_Init+0x58>)
 80005fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_I2C1_Init+0x50>)
 800060e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000612:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <MX_I2C1_Init+0x50>)
 800062e:	f001 f879 	bl	8001724 <HAL_I2C_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000638:	f000 f8ca 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	200000fc 	.word	0x200000fc
 8000644:	40005400 	.word	0x40005400
 8000648:	00061a80 	.word	0x00061a80

0800064c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000660:	463b      	mov	r3, r7
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <MX_TIM1_Init+0x9c>)
 800066a:	4a20      	ldr	r2, [pc, #128]	; (80006ec <MX_TIM1_Init+0xa0>)
 800066c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 719;
 800066e:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <MX_TIM1_Init+0x9c>)
 8000670:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000674:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000676:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <MX_TIM1_Init+0x9c>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800067c:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <MX_TIM1_Init+0x9c>)
 800067e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000682:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <MX_TIM1_Init+0x9c>)
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <MX_TIM1_Init+0x9c>)
 800068c:	2200      	movs	r2, #0
 800068e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <MX_TIM1_Init+0x9c>)
 8000692:	2280      	movs	r2, #128	; 0x80
 8000694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000696:	4814      	ldr	r0, [pc, #80]	; (80006e8 <MX_TIM1_Init+0x9c>)
 8000698:	f002 f9c2 	bl	8002a20 <HAL_TIM_Base_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80006a2:	f000 f895 	bl	80007d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006ac:	f107 0308 	add.w	r3, r7, #8
 80006b0:	4619      	mov	r1, r3
 80006b2:	480d      	ldr	r0, [pc, #52]	; (80006e8 <MX_TIM1_Init+0x9c>)
 80006b4:	f002 fb5e 	bl	8002d74 <HAL_TIM_ConfigClockSource>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80006be:	f000 f887 	bl	80007d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c2:	2300      	movs	r3, #0
 80006c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006ca:	463b      	mov	r3, r7
 80006cc:	4619      	mov	r1, r3
 80006ce:	4806      	ldr	r0, [pc, #24]	; (80006e8 <MX_TIM1_Init+0x9c>)
 80006d0:	f002 fd30 	bl	8003134 <HAL_TIMEx_MasterConfigSynchronization>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80006da:	f000 f879 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	3718      	adds	r7, #24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000150 	.word	0x20000150
 80006ec:	40012c00 	.word	0x40012c00

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 0310 	add.w	r3, r7, #16
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000704:	4b2e      	ldr	r3, [pc, #184]	; (80007c0 <MX_GPIO_Init+0xd0>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a2d      	ldr	r2, [pc, #180]	; (80007c0 <MX_GPIO_Init+0xd0>)
 800070a:	f043 0310 	orr.w	r3, r3, #16
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b2b      	ldr	r3, [pc, #172]	; (80007c0 <MX_GPIO_Init+0xd0>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f003 0310 	and.w	r3, r3, #16
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071c:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <MX_GPIO_Init+0xd0>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a27      	ldr	r2, [pc, #156]	; (80007c0 <MX_GPIO_Init+0xd0>)
 8000722:	f043 0320 	orr.w	r3, r3, #32
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <MX_GPIO_Init+0xd0>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f003 0320 	and.w	r3, r3, #32
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <MX_GPIO_Init+0xd0>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <MX_GPIO_Init+0xd0>)
 800073a:	f043 0304 	orr.w	r3, r3, #4
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <MX_GPIO_Init+0xd0>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f003 0304 	and.w	r3, r3, #4
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074c:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <MX_GPIO_Init+0xd0>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a1b      	ldr	r2, [pc, #108]	; (80007c0 <MX_GPIO_Init+0xd0>)
 8000752:	f043 0308 	orr.w	r3, r3, #8
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <MX_GPIO_Init+0xd0>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f003 0308 	and.w	r3, r3, #8
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800076a:	4816      	ldr	r0, [pc, #88]	; (80007c4 <MX_GPIO_Init+0xd4>)
 800076c:	f000 ff91 	bl	8001692 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000770:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000774:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000776:	2301      	movs	r3, #1
 8000778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077e:	2303      	movs	r3, #3
 8000780:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000782:	f107 0310 	add.w	r3, r7, #16
 8000786:	4619      	mov	r1, r3
 8000788:	480e      	ldr	r0, [pc, #56]	; (80007c4 <MX_GPIO_Init+0xd4>)
 800078a:	f000 fde7 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : NEC_Pin */
  GPIO_InitStruct.Pin = NEC_Pin;
 800078e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000792:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_GPIO_Init+0xd8>)
 8000796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NEC_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	4619      	mov	r1, r3
 80007a2:	480a      	ldr	r0, [pc, #40]	; (80007cc <MX_GPIO_Init+0xdc>)
 80007a4:	f000 fdda 	bl	800135c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2100      	movs	r1, #0
 80007ac:	2017      	movs	r0, #23
 80007ae:	f000 fd9e 	bl	80012ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007b2:	2017      	movs	r0, #23
 80007b4:	f000 fdb7 	bl	8001326 <HAL_NVIC_EnableIRQ>

}
 80007b8:	bf00      	nop
 80007ba:	3720      	adds	r7, #32
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40011000 	.word	0x40011000
 80007c8:	10310000 	.word	0x10310000
 80007cc:	40010c00 	.word	0x40010c00

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <Error_Handler+0x8>
	...

080007dc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80007e2:	f000 fa27 	bl	8000c34 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80007e6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80007ea:	2201      	movs	r2, #1
 80007ec:	2178      	movs	r1, #120	; 0x78
 80007ee:	485b      	ldr	r0, [pc, #364]	; (800095c <SSD1306_Init+0x180>)
 80007f0:	f001 f9da 	bl	8001ba8 <HAL_I2C_IsDeviceReady>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	e0a9      	b.n	8000952 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80007fe:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000802:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000804:	e002      	b.n	800080c <SSD1306_Init+0x30>
		p--;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	3b01      	subs	r3, #1
 800080a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d1f9      	bne.n	8000806 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000812:	22ae      	movs	r2, #174	; 0xae
 8000814:	2100      	movs	r1, #0
 8000816:	2078      	movs	r0, #120	; 0x78
 8000818:	f000 fa86 	bl	8000d28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800081c:	2220      	movs	r2, #32
 800081e:	2100      	movs	r1, #0
 8000820:	2078      	movs	r0, #120	; 0x78
 8000822:	f000 fa81 	bl	8000d28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000826:	2210      	movs	r2, #16
 8000828:	2100      	movs	r1, #0
 800082a:	2078      	movs	r0, #120	; 0x78
 800082c:	f000 fa7c 	bl	8000d28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000830:	22b0      	movs	r2, #176	; 0xb0
 8000832:	2100      	movs	r1, #0
 8000834:	2078      	movs	r0, #120	; 0x78
 8000836:	f000 fa77 	bl	8000d28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800083a:	22c8      	movs	r2, #200	; 0xc8
 800083c:	2100      	movs	r1, #0
 800083e:	2078      	movs	r0, #120	; 0x78
 8000840:	f000 fa72 	bl	8000d28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000844:	2200      	movs	r2, #0
 8000846:	2100      	movs	r1, #0
 8000848:	2078      	movs	r0, #120	; 0x78
 800084a:	f000 fa6d 	bl	8000d28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800084e:	2210      	movs	r2, #16
 8000850:	2100      	movs	r1, #0
 8000852:	2078      	movs	r0, #120	; 0x78
 8000854:	f000 fa68 	bl	8000d28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000858:	2240      	movs	r2, #64	; 0x40
 800085a:	2100      	movs	r1, #0
 800085c:	2078      	movs	r0, #120	; 0x78
 800085e:	f000 fa63 	bl	8000d28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000862:	2281      	movs	r2, #129	; 0x81
 8000864:	2100      	movs	r1, #0
 8000866:	2078      	movs	r0, #120	; 0x78
 8000868:	f000 fa5e 	bl	8000d28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800086c:	22ff      	movs	r2, #255	; 0xff
 800086e:	2100      	movs	r1, #0
 8000870:	2078      	movs	r0, #120	; 0x78
 8000872:	f000 fa59 	bl	8000d28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000876:	22a1      	movs	r2, #161	; 0xa1
 8000878:	2100      	movs	r1, #0
 800087a:	2078      	movs	r0, #120	; 0x78
 800087c:	f000 fa54 	bl	8000d28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000880:	22a6      	movs	r2, #166	; 0xa6
 8000882:	2100      	movs	r1, #0
 8000884:	2078      	movs	r0, #120	; 0x78
 8000886:	f000 fa4f 	bl	8000d28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800088a:	22a8      	movs	r2, #168	; 0xa8
 800088c:	2100      	movs	r1, #0
 800088e:	2078      	movs	r0, #120	; 0x78
 8000890:	f000 fa4a 	bl	8000d28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000894:	223f      	movs	r2, #63	; 0x3f
 8000896:	2100      	movs	r1, #0
 8000898:	2078      	movs	r0, #120	; 0x78
 800089a:	f000 fa45 	bl	8000d28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800089e:	22a4      	movs	r2, #164	; 0xa4
 80008a0:	2100      	movs	r1, #0
 80008a2:	2078      	movs	r0, #120	; 0x78
 80008a4:	f000 fa40 	bl	8000d28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80008a8:	22d3      	movs	r2, #211	; 0xd3
 80008aa:	2100      	movs	r1, #0
 80008ac:	2078      	movs	r0, #120	; 0x78
 80008ae:	f000 fa3b 	bl	8000d28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80008b2:	2200      	movs	r2, #0
 80008b4:	2100      	movs	r1, #0
 80008b6:	2078      	movs	r0, #120	; 0x78
 80008b8:	f000 fa36 	bl	8000d28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80008bc:	22d5      	movs	r2, #213	; 0xd5
 80008be:	2100      	movs	r1, #0
 80008c0:	2078      	movs	r0, #120	; 0x78
 80008c2:	f000 fa31 	bl	8000d28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80008c6:	22f0      	movs	r2, #240	; 0xf0
 80008c8:	2100      	movs	r1, #0
 80008ca:	2078      	movs	r0, #120	; 0x78
 80008cc:	f000 fa2c 	bl	8000d28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80008d0:	22d9      	movs	r2, #217	; 0xd9
 80008d2:	2100      	movs	r1, #0
 80008d4:	2078      	movs	r0, #120	; 0x78
 80008d6:	f000 fa27 	bl	8000d28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80008da:	2222      	movs	r2, #34	; 0x22
 80008dc:	2100      	movs	r1, #0
 80008de:	2078      	movs	r0, #120	; 0x78
 80008e0:	f000 fa22 	bl	8000d28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80008e4:	22da      	movs	r2, #218	; 0xda
 80008e6:	2100      	movs	r1, #0
 80008e8:	2078      	movs	r0, #120	; 0x78
 80008ea:	f000 fa1d 	bl	8000d28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80008ee:	2212      	movs	r2, #18
 80008f0:	2100      	movs	r1, #0
 80008f2:	2078      	movs	r0, #120	; 0x78
 80008f4:	f000 fa18 	bl	8000d28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80008f8:	22db      	movs	r2, #219	; 0xdb
 80008fa:	2100      	movs	r1, #0
 80008fc:	2078      	movs	r0, #120	; 0x78
 80008fe:	f000 fa13 	bl	8000d28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000902:	2220      	movs	r2, #32
 8000904:	2100      	movs	r1, #0
 8000906:	2078      	movs	r0, #120	; 0x78
 8000908:	f000 fa0e 	bl	8000d28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800090c:	228d      	movs	r2, #141	; 0x8d
 800090e:	2100      	movs	r1, #0
 8000910:	2078      	movs	r0, #120	; 0x78
 8000912:	f000 fa09 	bl	8000d28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000916:	2214      	movs	r2, #20
 8000918:	2100      	movs	r1, #0
 800091a:	2078      	movs	r0, #120	; 0x78
 800091c:	f000 fa04 	bl	8000d28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000920:	22af      	movs	r2, #175	; 0xaf
 8000922:	2100      	movs	r1, #0
 8000924:	2078      	movs	r0, #120	; 0x78
 8000926:	f000 f9ff 	bl	8000d28 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800092a:	222e      	movs	r2, #46	; 0x2e
 800092c:	2100      	movs	r1, #0
 800092e:	2078      	movs	r0, #120	; 0x78
 8000930:	f000 f9fa 	bl	8000d28 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000934:	2000      	movs	r0, #0
 8000936:	f000 f843 	bl	80009c0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800093a:	f000 f813 	bl	8000964 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <SSD1306_Init+0x184>)
 8000940:	2200      	movs	r2, #0
 8000942:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <SSD1306_Init+0x184>)
 8000946:	2200      	movs	r2, #0
 8000948:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800094a:	4b05      	ldr	r3, [pc, #20]	; (8000960 <SSD1306_Init+0x184>)
 800094c:	2201      	movs	r2, #1
 800094e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000950:	2301      	movs	r3, #1
}
 8000952:	4618      	mov	r0, r3
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200000fc 	.word	0x200000fc
 8000960:	20000598 	.word	0x20000598

08000964 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800096a:	2300      	movs	r3, #0
 800096c:	71fb      	strb	r3, [r7, #7]
 800096e:	e01d      	b.n	80009ac <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	3b50      	subs	r3, #80	; 0x50
 8000974:	b2db      	uxtb	r3, r3
 8000976:	461a      	mov	r2, r3
 8000978:	2100      	movs	r1, #0
 800097a:	2078      	movs	r0, #120	; 0x78
 800097c:	f000 f9d4 	bl	8000d28 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2078      	movs	r0, #120	; 0x78
 8000986:	f000 f9cf 	bl	8000d28 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800098a:	2210      	movs	r2, #16
 800098c:	2100      	movs	r1, #0
 800098e:	2078      	movs	r0, #120	; 0x78
 8000990:	f000 f9ca 	bl	8000d28 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	01db      	lsls	r3, r3, #7
 8000998:	4a08      	ldr	r2, [pc, #32]	; (80009bc <SSD1306_UpdateScreen+0x58>)
 800099a:	441a      	add	r2, r3
 800099c:	2380      	movs	r3, #128	; 0x80
 800099e:	2140      	movs	r1, #64	; 0x40
 80009a0:	2078      	movs	r0, #120	; 0x78
 80009a2:	f000 f95b 	bl	8000c5c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	3301      	adds	r3, #1
 80009aa:	71fb      	strb	r3, [r7, #7]
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	2b07      	cmp	r3, #7
 80009b0:	d9de      	bls.n	8000970 <SSD1306_UpdateScreen+0xc>
	}
}
 80009b2:	bf00      	nop
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000198 	.word	0x20000198

080009c0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d101      	bne.n	80009d4 <SSD1306_Fill+0x14>
 80009d0:	2300      	movs	r3, #0
 80009d2:	e000      	b.n	80009d6 <SSD1306_Fill+0x16>
 80009d4:	23ff      	movs	r3, #255	; 0xff
 80009d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009da:	4619      	mov	r1, r3
 80009dc:	4803      	ldr	r0, [pc, #12]	; (80009ec <SSD1306_Fill+0x2c>)
 80009de:	f002 fc43 	bl	8003268 <memset>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000198 	.word	0x20000198

080009f0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	80fb      	strh	r3, [r7, #6]
 80009fa:	460b      	mov	r3, r1
 80009fc:	80bb      	strh	r3, [r7, #4]
 80009fe:	4613      	mov	r3, r2
 8000a00:	70fb      	strb	r3, [r7, #3]
	if (
 8000a02:	88fb      	ldrh	r3, [r7, #6]
 8000a04:	2b7f      	cmp	r3, #127	; 0x7f
 8000a06:	d848      	bhi.n	8000a9a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000a08:	88bb      	ldrh	r3, [r7, #4]
 8000a0a:	2b3f      	cmp	r3, #63	; 0x3f
 8000a0c:	d845      	bhi.n	8000a9a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000a0e:	4b25      	ldr	r3, [pc, #148]	; (8000aa4 <SSD1306_DrawPixel+0xb4>)
 8000a10:	791b      	ldrb	r3, [r3, #4]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d006      	beq.n	8000a24 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000a16:	78fb      	ldrb	r3, [r7, #3]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	bf0c      	ite	eq
 8000a1c:	2301      	moveq	r3, #1
 8000a1e:	2300      	movne	r3, #0
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000a24:	78fb      	ldrb	r3, [r7, #3]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d11a      	bne.n	8000a60 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000a2a:	88fa      	ldrh	r2, [r7, #6]
 8000a2c:	88bb      	ldrh	r3, [r7, #4]
 8000a2e:	08db      	lsrs	r3, r3, #3
 8000a30:	b298      	uxth	r0, r3
 8000a32:	4603      	mov	r3, r0
 8000a34:	01db      	lsls	r3, r3, #7
 8000a36:	4413      	add	r3, r2
 8000a38:	4a1b      	ldr	r2, [pc, #108]	; (8000aa8 <SSD1306_DrawPixel+0xb8>)
 8000a3a:	5cd3      	ldrb	r3, [r2, r3]
 8000a3c:	b25a      	sxtb	r2, r3
 8000a3e:	88bb      	ldrh	r3, [r7, #4]
 8000a40:	f003 0307 	and.w	r3, r3, #7
 8000a44:	2101      	movs	r1, #1
 8000a46:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4a:	b25b      	sxtb	r3, r3
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	b259      	sxtb	r1, r3
 8000a50:	88fa      	ldrh	r2, [r7, #6]
 8000a52:	4603      	mov	r3, r0
 8000a54:	01db      	lsls	r3, r3, #7
 8000a56:	4413      	add	r3, r2
 8000a58:	b2c9      	uxtb	r1, r1
 8000a5a:	4a13      	ldr	r2, [pc, #76]	; (8000aa8 <SSD1306_DrawPixel+0xb8>)
 8000a5c:	54d1      	strb	r1, [r2, r3]
 8000a5e:	e01d      	b.n	8000a9c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000a60:	88fa      	ldrh	r2, [r7, #6]
 8000a62:	88bb      	ldrh	r3, [r7, #4]
 8000a64:	08db      	lsrs	r3, r3, #3
 8000a66:	b298      	uxth	r0, r3
 8000a68:	4603      	mov	r3, r0
 8000a6a:	01db      	lsls	r3, r3, #7
 8000a6c:	4413      	add	r3, r2
 8000a6e:	4a0e      	ldr	r2, [pc, #56]	; (8000aa8 <SSD1306_DrawPixel+0xb8>)
 8000a70:	5cd3      	ldrb	r3, [r2, r3]
 8000a72:	b25a      	sxtb	r2, r3
 8000a74:	88bb      	ldrh	r3, [r7, #4]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a80:	b25b      	sxtb	r3, r3
 8000a82:	43db      	mvns	r3, r3
 8000a84:	b25b      	sxtb	r3, r3
 8000a86:	4013      	ands	r3, r2
 8000a88:	b259      	sxtb	r1, r3
 8000a8a:	88fa      	ldrh	r2, [r7, #6]
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	01db      	lsls	r3, r3, #7
 8000a90:	4413      	add	r3, r2
 8000a92:	b2c9      	uxtb	r1, r1
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <SSD1306_DrawPixel+0xb8>)
 8000a96:	54d1      	strb	r1, [r2, r3]
 8000a98:	e000      	b.n	8000a9c <SSD1306_DrawPixel+0xac>
		return;
 8000a9a:	bf00      	nop
	}
}
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr
 8000aa4:	20000598 	.word	0x20000598
 8000aa8:	20000198 	.word	0x20000198

08000aac <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	460a      	mov	r2, r1
 8000ab6:	80fb      	strh	r3, [r7, #6]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000abc:	4a05      	ldr	r2, [pc, #20]	; (8000ad4 <SSD1306_GotoXY+0x28>)
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000ac2:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <SSD1306_GotoXY+0x28>)
 8000ac4:	88bb      	ldrh	r3, [r7, #4]
 8000ac6:	8053      	strh	r3, [r2, #2]
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000598 	.word	0x20000598

08000ad8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	6039      	str	r1, [r7, #0]
 8000ae2:	71fb      	strb	r3, [r7, #7]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000ae8:	4b3a      	ldr	r3, [pc, #232]	; (8000bd4 <SSD1306_Putc+0xfc>)
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	461a      	mov	r2, r3
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	4413      	add	r3, r2
	if (
 8000af4:	2b7f      	cmp	r3, #127	; 0x7f
 8000af6:	dc07      	bgt.n	8000b08 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000af8:	4b36      	ldr	r3, [pc, #216]	; (8000bd4 <SSD1306_Putc+0xfc>)
 8000afa:	885b      	ldrh	r3, [r3, #2]
 8000afc:	461a      	mov	r2, r3
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	785b      	ldrb	r3, [r3, #1]
 8000b02:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000b04:	2b3f      	cmp	r3, #63	; 0x3f
 8000b06:	dd01      	ble.n	8000b0c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	e05e      	b.n	8000bca <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	e04b      	b.n	8000baa <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685a      	ldr	r2, [r3, #4]
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	3b20      	subs	r3, #32
 8000b1a:	6839      	ldr	r1, [r7, #0]
 8000b1c:	7849      	ldrb	r1, [r1, #1]
 8000b1e:	fb01 f303 	mul.w	r3, r1, r3
 8000b22:	4619      	mov	r1, r3
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	440b      	add	r3, r1
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	4413      	add	r3, r2
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	e030      	b.n	8000b98 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d010      	beq.n	8000b68 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000b46:	4b23      	ldr	r3, [pc, #140]	; (8000bd4 <SSD1306_Putc+0xfc>)
 8000b48:	881a      	ldrh	r2, [r3, #0]
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	4413      	add	r3, r2
 8000b50:	b298      	uxth	r0, r3
 8000b52:	4b20      	ldr	r3, [pc, #128]	; (8000bd4 <SSD1306_Putc+0xfc>)
 8000b54:	885a      	ldrh	r2, [r3, #2]
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	4413      	add	r3, r2
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	79ba      	ldrb	r2, [r7, #6]
 8000b60:	4619      	mov	r1, r3
 8000b62:	f7ff ff45 	bl	80009f0 <SSD1306_DrawPixel>
 8000b66:	e014      	b.n	8000b92 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000b68:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <SSD1306_Putc+0xfc>)
 8000b6a:	881a      	ldrh	r2, [r3, #0]
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	4413      	add	r3, r2
 8000b72:	b298      	uxth	r0, r3
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <SSD1306_Putc+0xfc>)
 8000b76:	885a      	ldrh	r2, [r3, #2]
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	4413      	add	r3, r2
 8000b7e:	b299      	uxth	r1, r3
 8000b80:	79bb      	ldrb	r3, [r7, #6]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	bf0c      	ite	eq
 8000b86:	2301      	moveq	r3, #1
 8000b88:	2300      	movne	r3, #0
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	f7ff ff2f 	bl	80009f0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	3301      	adds	r3, #1
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d3c8      	bcc.n	8000b36 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	785b      	ldrb	r3, [r3, #1]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d3ad      	bcc.n	8000b12 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <SSD1306_Putc+0xfc>)
 8000bb8:	881a      	ldrh	r2, [r3, #0]
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	4413      	add	r3, r2
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <SSD1306_Putc+0xfc>)
 8000bc6:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000598 	.word	0x20000598

08000bd8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	4613      	mov	r3, r2
 8000be4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000be6:	e012      	b.n	8000c0e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	79fa      	ldrb	r2, [r7, #7]
 8000bee:	68b9      	ldr	r1, [r7, #8]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff71 	bl	8000ad8 <SSD1306_Putc>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d002      	beq.n	8000c08 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	e008      	b.n	8000c1a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1e8      	bne.n	8000be8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	781b      	ldrb	r3, [r3, #0]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000c26:	2000      	movs	r0, #0
 8000c28:	f7ff feca 	bl	80009c0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000c2c:	f7ff fe9a 	bl	8000964 <SSD1306_UpdateScreen>
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <ssd1306_I2C_Init+0x24>)
 8000c3c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c3e:	e002      	b.n	8000c46 <ssd1306_I2C_Init+0x12>
		p--;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1f9      	bne.n	8000c40 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr
 8000c58:	0003d090 	.word	0x0003d090

08000c5c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b0c7      	sub	sp, #284	; 0x11c
 8000c60:	af02      	add	r7, sp, #8
 8000c62:	4604      	mov	r4, r0
 8000c64:	4608      	mov	r0, r1
 8000c66:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000c6a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000c6e:	600a      	str	r2, [r1, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c76:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000c7a:	4622      	mov	r2, r4
 8000c7c:	701a      	strb	r2, [r3, #0]
 8000c7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c82:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000c86:	4602      	mov	r2, r0
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000c92:	460a      	mov	r2, r1
 8000c94:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000c96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000c9e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ca2:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000ca6:	7812      	ldrb	r2, [r2, #0]
 8000ca8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000caa:	2300      	movs	r3, #0
 8000cac:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000cb0:	e015      	b.n	8000cde <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000cb2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000cb6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000cba:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000cbe:	6812      	ldr	r2, [r2, #0]
 8000cc0:	441a      	add	r2, r3
 8000cc2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	7811      	ldrb	r1, [r2, #0]
 8000cca:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000cce:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000cd2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000cd4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000cd8:	3301      	adds	r3, #1
 8000cda:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000cde:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ce8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000cec:	8812      	ldrh	r2, [r2, #0]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d8df      	bhi.n	8000cb2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000cf2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cf6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b299      	uxth	r1, r3
 8000cfe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	f107 020c 	add.w	r2, r7, #12
 8000d10:	200a      	movs	r0, #10
 8000d12:	9000      	str	r0, [sp, #0]
 8000d14:	4803      	ldr	r0, [pc, #12]	; (8000d24 <ssd1306_I2C_WriteMulti+0xc8>)
 8000d16:	f000 fe49 	bl	80019ac <HAL_I2C_Master_Transmit>
}
 8000d1a:	bf00      	nop
 8000d1c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd90      	pop	{r4, r7, pc}
 8000d24:	200000fc 	.word	0x200000fc

08000d28 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af02      	add	r7, sp, #8
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
 8000d32:	460b      	mov	r3, r1
 8000d34:	71bb      	strb	r3, [r7, #6]
 8000d36:	4613      	mov	r3, r2
 8000d38:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000d3a:	79bb      	ldrb	r3, [r7, #6]
 8000d3c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000d3e:	797b      	ldrb	r3, [r7, #5]
 8000d40:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	b299      	uxth	r1, r3
 8000d46:	f107 020c 	add.w	r2, r7, #12
 8000d4a:	230a      	movs	r3, #10
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	2302      	movs	r3, #2
 8000d50:	4803      	ldr	r0, [pc, #12]	; (8000d60 <ssd1306_I2C_Write+0x38>)
 8000d52:	f000 fe2b 	bl	80019ac <HAL_I2C_Master_Transmit>
}
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200000fc 	.word	0x200000fc

08000d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <HAL_MspInit+0x5c>)
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <HAL_MspInit+0x5c>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6193      	str	r3, [r2, #24]
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_MspInit+0x5c>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <HAL_MspInit+0x5c>)
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <HAL_MspInit+0x5c>)
 8000d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d8c:	61d3      	str	r3, [r2, #28]
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <HAL_MspInit+0x5c>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <HAL_MspInit+0x60>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <HAL_MspInit+0x60>)
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40010000 	.word	0x40010000

08000dc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a15      	ldr	r2, [pc, #84]	; (8000e38 <HAL_I2C_MspInit+0x70>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d123      	bne.n	8000e30 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <HAL_I2C_MspInit+0x74>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a13      	ldr	r2, [pc, #76]	; (8000e3c <HAL_I2C_MspInit+0x74>)
 8000dee:	f043 0308 	orr.w	r3, r3, #8
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <HAL_I2C_MspInit+0x74>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0308 	and.w	r3, r3, #8
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e00:	23c0      	movs	r3, #192	; 0xc0
 8000e02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e04:	2312      	movs	r3, #18
 8000e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	4619      	mov	r1, r3
 8000e12:	480b      	ldr	r0, [pc, #44]	; (8000e40 <HAL_I2C_MspInit+0x78>)
 8000e14:	f000 faa2 	bl	800135c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <HAL_I2C_MspInit+0x74>)
 8000e1a:	69db      	ldr	r3, [r3, #28]
 8000e1c:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <HAL_I2C_MspInit+0x74>)
 8000e1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e22:	61d3      	str	r3, [r2, #28]
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <HAL_I2C_MspInit+0x74>)
 8000e26:	69db      	ldr	r3, [r3, #28]
 8000e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e30:	bf00      	nop
 8000e32:	3720      	adds	r7, #32
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40005400 	.word	0x40005400
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40010c00 	.word	0x40010c00

08000e44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a19      	ldr	r2, [pc, #100]	; (8000eb8 <HAL_TIM_Base_MspInit+0x74>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d12b      	bne.n	8000eae <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e56:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <HAL_TIM_Base_MspInit+0x78>)
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	4a18      	ldr	r2, [pc, #96]	; (8000ebc <HAL_TIM_Base_MspInit+0x78>)
 8000e5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e60:	6193      	str	r3, [r2, #24]
 8000e62:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <HAL_TIM_Base_MspInit+0x78>)
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	2018      	movs	r0, #24
 8000e74:	f000 fa3b 	bl	80012ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000e78:	2018      	movs	r0, #24
 8000e7a:	f000 fa54 	bl	8001326 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	2019      	movs	r0, #25
 8000e84:	f000 fa33 	bl	80012ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000e88:	2019      	movs	r0, #25
 8000e8a:	f000 fa4c 	bl	8001326 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	201a      	movs	r0, #26
 8000e94:	f000 fa2b 	bl	80012ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000e98:	201a      	movs	r0, #26
 8000e9a:	f000 fa44 	bl	8001326 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	201b      	movs	r0, #27
 8000ea4:	f000 fa23 	bl	80012ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000ea8:	201b      	movs	r0, #27
 8000eaa:	f000 fa3c 	bl	8001326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40012c00 	.word	0x40012c00
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <NMI_Handler+0x4>

08000ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <HardFault_Handler+0x4>

08000ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <MemManage_Handler+0x4>

08000ed2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <BusFault_Handler+0x4>

08000ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <UsageFault_Handler+0x4>

08000ede <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr

08000eea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr

08000ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr

08000f02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f06:	f000 f8db 	bl	80010c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NEC_Pin);
 8000f12:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f16:	f000 fbed 	bl	80016f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <TIM1_BRK_IRQHandler+0x10>)
 8000f26:	f001 fe1d 	bl	8002b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000150 	.word	0x20000150

08000f34 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <TIM1_UP_IRQHandler+0x10>)
 8000f3a:	f001 fe13 	bl	8002b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000150 	.word	0x20000150

08000f48 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <TIM1_TRG_COM_IRQHandler+0x10>)
 8000f4e:	f001 fe09 	bl	8002b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000150 	.word	0x20000150

08000f5c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <TIM1_CC_IRQHandler+0x10>)
 8000f62:	f001 fdff 	bl	8002b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000150 	.word	0x20000150

08000f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f78:	4a14      	ldr	r2, [pc, #80]	; (8000fcc <_sbrk+0x5c>)
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <_sbrk+0x60>)
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d102      	bne.n	8000f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <_sbrk+0x64>)
 8000f8e:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <_sbrk+0x68>)
 8000f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <_sbrk+0x64>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d207      	bcs.n	8000fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa0:	f002 f938 	bl	8003214 <__errno>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	e009      	b.n	8000fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <_sbrk+0x64>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb6:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	4a05      	ldr	r2, [pc, #20]	; (8000fd4 <_sbrk+0x64>)
 8000fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20005000 	.word	0x20005000
 8000fd0:	00000400 	.word	0x00000400
 8000fd4:	200005a0 	.word	0x200005a0
 8000fd8:	200005b8 	.word	0x200005b8

08000fdc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe8:	480c      	ldr	r0, [pc, #48]	; (800101c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fea:	490d      	ldr	r1, [pc, #52]	; (8001020 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fec:	4a0d      	ldr	r2, [pc, #52]	; (8001024 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001000:	4c0a      	ldr	r4, [pc, #40]	; (800102c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800100e:	f7ff ffe5 	bl	8000fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001012:	f002 f905 	bl	8003220 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001016:	f7ff fa31 	bl	800047c <main>
  bx lr
 800101a:	4770      	bx	lr
  ldr r0, =_sdata
 800101c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001020:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001024:	080050dc 	.word	0x080050dc
  ldr r2, =_sbss
 8001028:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800102c:	200005b8 	.word	0x200005b8

08001030 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <ADC1_2_IRQHandler>
	...

08001034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <HAL_Init+0x28>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a07      	ldr	r2, [pc, #28]	; (800105c <HAL_Init+0x28>)
 800103e:	f043 0310 	orr.w	r3, r3, #16
 8001042:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001044:	2003      	movs	r0, #3
 8001046:	f000 f947 	bl	80012d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800104a:	200f      	movs	r0, #15
 800104c:	f000 f808 	bl	8001060 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001050:	f7ff fe88 	bl	8000d64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40022000 	.word	0x40022000

08001060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_InitTick+0x54>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_InitTick+0x58>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4619      	mov	r1, r3
 8001072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001076:	fbb3 f3f1 	udiv	r3, r3, r1
 800107a:	fbb2 f3f3 	udiv	r3, r2, r3
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f95f 	bl	8001342 <HAL_SYSTICK_Config>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e00e      	b.n	80010ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b0f      	cmp	r3, #15
 8001092:	d80a      	bhi.n	80010aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001094:	2200      	movs	r2, #0
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	f04f 30ff 	mov.w	r0, #4294967295
 800109c:	f000 f927 	bl	80012ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a0:	4a06      	ldr	r2, [pc, #24]	; (80010bc <HAL_InitTick+0x5c>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	e000      	b.n	80010ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000010 	.word	0x20000010
 80010b8:	20000018 	.word	0x20000018
 80010bc:	20000014 	.word	0x20000014

080010c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <HAL_IncTick+0x1c>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <HAL_IncTick+0x20>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a03      	ldr	r2, [pc, #12]	; (80010e0 <HAL_IncTick+0x20>)
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr
 80010dc:	20000018 	.word	0x20000018
 80010e0:	200005a4 	.word	0x200005a4

080010e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return uwTick;
 80010e8:	4b02      	ldr	r3, [pc, #8]	; (80010f4 <HAL_GetTick+0x10>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr
 80010f4:	200005a4 	.word	0x200005a4

080010f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001100:	f7ff fff0 	bl	80010e4 <HAL_GetTick>
 8001104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001110:	d005      	beq.n	800111e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <HAL_Delay+0x44>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4413      	add	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800111e:	bf00      	nop
 8001120:	f7ff ffe0 	bl	80010e4 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	429a      	cmp	r2, r3
 800112e:	d8f7      	bhi.n	8001120 <HAL_Delay+0x28>
  {
  }
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000018 	.word	0x20000018

08001140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800115c:	4013      	ands	r3, r2
 800115e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001168:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800116c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001172:	4a04      	ldr	r2, [pc, #16]	; (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	60d3      	str	r3, [r2, #12]
}
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <__NVIC_GetPriorityGrouping+0x18>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	f003 0307 	and.w	r3, r3, #7
}
 8001196:	4618      	mov	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	db0b      	blt.n	80011ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	f003 021f 	and.w	r2, r3, #31
 80011bc:	4906      	ldr	r1, [pc, #24]	; (80011d8 <__NVIC_EnableIRQ+0x34>)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	095b      	lsrs	r3, r3, #5
 80011c4:	2001      	movs	r0, #1
 80011c6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	e000e100 	.word	0xe000e100

080011dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db0a      	blt.n	8001206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	490c      	ldr	r1, [pc, #48]	; (8001228 <__NVIC_SetPriority+0x4c>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	0112      	lsls	r2, r2, #4
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	440b      	add	r3, r1
 8001200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001204:	e00a      	b.n	800121c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4908      	ldr	r1, [pc, #32]	; (800122c <__NVIC_SetPriority+0x50>)
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	3b04      	subs	r3, #4
 8001214:	0112      	lsls	r2, r2, #4
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	440b      	add	r3, r1
 800121a:	761a      	strb	r2, [r3, #24]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000e100 	.word	0xe000e100
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f1c3 0307 	rsb	r3, r3, #7
 800124a:	2b04      	cmp	r3, #4
 800124c:	bf28      	it	cs
 800124e:	2304      	movcs	r3, #4
 8001250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3304      	adds	r3, #4
 8001256:	2b06      	cmp	r3, #6
 8001258:	d902      	bls.n	8001260 <NVIC_EncodePriority+0x30>
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3b03      	subs	r3, #3
 800125e:	e000      	b.n	8001262 <NVIC_EncodePriority+0x32>
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	f04f 32ff 	mov.w	r2, #4294967295
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	401a      	ands	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001278:	f04f 31ff 	mov.w	r1, #4294967295
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	43d9      	mvns	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	4313      	orrs	r3, r2
         );
}
 800128a:	4618      	mov	r0, r3
 800128c:	3724      	adds	r7, #36	; 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a4:	d301      	bcc.n	80012aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00f      	b.n	80012ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <SysTick_Config+0x40>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b2:	210f      	movs	r1, #15
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f7ff ff90 	bl	80011dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <SysTick_Config+0x40>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <SysTick_Config+0x40>)
 80012c4:	2207      	movs	r2, #7
 80012c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	e000e010 	.word	0xe000e010

080012d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff2d 	bl	8001140 <__NVIC_SetPriorityGrouping>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001300:	f7ff ff42 	bl	8001188 <__NVIC_GetPriorityGrouping>
 8001304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	6978      	ldr	r0, [r7, #20]
 800130c:	f7ff ff90 	bl	8001230 <NVIC_EncodePriority>
 8001310:	4602      	mov	r2, r0
 8001312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff5f 	bl	80011dc <__NVIC_SetPriority>
}
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff35 	bl	80011a4 <__NVIC_EnableIRQ>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffa2 	bl	8001294 <SysTick_Config>
 8001350:	4603      	mov	r3, r0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800135c:	b480      	push	{r7}
 800135e:	b08b      	sub	sp, #44	; 0x2c
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800136e:	e169      	b.n	8001644 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001370:	2201      	movs	r2, #1
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	69fa      	ldr	r2, [r7, #28]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	429a      	cmp	r2, r3
 800138a:	f040 8158 	bne.w	800163e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	4a9a      	ldr	r2, [pc, #616]	; (80015fc <HAL_GPIO_Init+0x2a0>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d05e      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 8001398:	4a98      	ldr	r2, [pc, #608]	; (80015fc <HAL_GPIO_Init+0x2a0>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d875      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 800139e:	4a98      	ldr	r2, [pc, #608]	; (8001600 <HAL_GPIO_Init+0x2a4>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d058      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 80013a4:	4a96      	ldr	r2, [pc, #600]	; (8001600 <HAL_GPIO_Init+0x2a4>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d86f      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013aa:	4a96      	ldr	r2, [pc, #600]	; (8001604 <HAL_GPIO_Init+0x2a8>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d052      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 80013b0:	4a94      	ldr	r2, [pc, #592]	; (8001604 <HAL_GPIO_Init+0x2a8>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d869      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013b6:	4a94      	ldr	r2, [pc, #592]	; (8001608 <HAL_GPIO_Init+0x2ac>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d04c      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 80013bc:	4a92      	ldr	r2, [pc, #584]	; (8001608 <HAL_GPIO_Init+0x2ac>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d863      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013c2:	4a92      	ldr	r2, [pc, #584]	; (800160c <HAL_GPIO_Init+0x2b0>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d046      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 80013c8:	4a90      	ldr	r2, [pc, #576]	; (800160c <HAL_GPIO_Init+0x2b0>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d85d      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013ce:	2b12      	cmp	r3, #18
 80013d0:	d82a      	bhi.n	8001428 <HAL_GPIO_Init+0xcc>
 80013d2:	2b12      	cmp	r3, #18
 80013d4:	d859      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013d6:	a201      	add	r2, pc, #4	; (adr r2, 80013dc <HAL_GPIO_Init+0x80>)
 80013d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013dc:	08001457 	.word	0x08001457
 80013e0:	08001431 	.word	0x08001431
 80013e4:	08001443 	.word	0x08001443
 80013e8:	08001485 	.word	0x08001485
 80013ec:	0800148b 	.word	0x0800148b
 80013f0:	0800148b 	.word	0x0800148b
 80013f4:	0800148b 	.word	0x0800148b
 80013f8:	0800148b 	.word	0x0800148b
 80013fc:	0800148b 	.word	0x0800148b
 8001400:	0800148b 	.word	0x0800148b
 8001404:	0800148b 	.word	0x0800148b
 8001408:	0800148b 	.word	0x0800148b
 800140c:	0800148b 	.word	0x0800148b
 8001410:	0800148b 	.word	0x0800148b
 8001414:	0800148b 	.word	0x0800148b
 8001418:	0800148b 	.word	0x0800148b
 800141c:	0800148b 	.word	0x0800148b
 8001420:	08001439 	.word	0x08001439
 8001424:	0800144d 	.word	0x0800144d
 8001428:	4a79      	ldr	r2, [pc, #484]	; (8001610 <HAL_GPIO_Init+0x2b4>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d013      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800142e:	e02c      	b.n	800148a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	623b      	str	r3, [r7, #32]
          break;
 8001436:	e029      	b.n	800148c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	3304      	adds	r3, #4
 800143e:	623b      	str	r3, [r7, #32]
          break;
 8001440:	e024      	b.n	800148c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	3308      	adds	r3, #8
 8001448:	623b      	str	r3, [r7, #32]
          break;
 800144a:	e01f      	b.n	800148c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	330c      	adds	r3, #12
 8001452:	623b      	str	r3, [r7, #32]
          break;
 8001454:	e01a      	b.n	800148c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d102      	bne.n	8001464 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800145e:	2304      	movs	r3, #4
 8001460:	623b      	str	r3, [r7, #32]
          break;
 8001462:	e013      	b.n	800148c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d105      	bne.n	8001478 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800146c:	2308      	movs	r3, #8
 800146e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	611a      	str	r2, [r3, #16]
          break;
 8001476:	e009      	b.n	800148c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001478:	2308      	movs	r3, #8
 800147a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69fa      	ldr	r2, [r7, #28]
 8001480:	615a      	str	r2, [r3, #20]
          break;
 8001482:	e003      	b.n	800148c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
          break;
 8001488:	e000      	b.n	800148c <HAL_GPIO_Init+0x130>
          break;
 800148a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	2bff      	cmp	r3, #255	; 0xff
 8001490:	d801      	bhi.n	8001496 <HAL_GPIO_Init+0x13a>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	e001      	b.n	800149a <HAL_GPIO_Init+0x13e>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3304      	adds	r3, #4
 800149a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	2bff      	cmp	r3, #255	; 0xff
 80014a0:	d802      	bhi.n	80014a8 <HAL_GPIO_Init+0x14c>
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	e002      	b.n	80014ae <HAL_GPIO_Init+0x152>
 80014a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014aa:	3b08      	subs	r3, #8
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	210f      	movs	r1, #15
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	fa01 f303 	lsl.w	r3, r1, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	401a      	ands	r2, r3
 80014c0:	6a39      	ldr	r1, [r7, #32]
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	fa01 f303 	lsl.w	r3, r1, r3
 80014c8:	431a      	orrs	r2, r3
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 80b1 	beq.w	800163e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014dc:	4b4d      	ldr	r3, [pc, #308]	; (8001614 <HAL_GPIO_Init+0x2b8>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	4a4c      	ldr	r2, [pc, #304]	; (8001614 <HAL_GPIO_Init+0x2b8>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6193      	str	r3, [r2, #24]
 80014e8:	4b4a      	ldr	r3, [pc, #296]	; (8001614 <HAL_GPIO_Init+0x2b8>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014f4:	4a48      	ldr	r2, [pc, #288]	; (8001618 <HAL_GPIO_Init+0x2bc>)
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001500:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	220f      	movs	r2, #15
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	4013      	ands	r3, r2
 8001516:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a40      	ldr	r2, [pc, #256]	; (800161c <HAL_GPIO_Init+0x2c0>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d013      	beq.n	8001548 <HAL_GPIO_Init+0x1ec>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a3f      	ldr	r2, [pc, #252]	; (8001620 <HAL_GPIO_Init+0x2c4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d00d      	beq.n	8001544 <HAL_GPIO_Init+0x1e8>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a3e      	ldr	r2, [pc, #248]	; (8001624 <HAL_GPIO_Init+0x2c8>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d007      	beq.n	8001540 <HAL_GPIO_Init+0x1e4>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a3d      	ldr	r2, [pc, #244]	; (8001628 <HAL_GPIO_Init+0x2cc>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d101      	bne.n	800153c <HAL_GPIO_Init+0x1e0>
 8001538:	2303      	movs	r3, #3
 800153a:	e006      	b.n	800154a <HAL_GPIO_Init+0x1ee>
 800153c:	2304      	movs	r3, #4
 800153e:	e004      	b.n	800154a <HAL_GPIO_Init+0x1ee>
 8001540:	2302      	movs	r3, #2
 8001542:	e002      	b.n	800154a <HAL_GPIO_Init+0x1ee>
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <HAL_GPIO_Init+0x1ee>
 8001548:	2300      	movs	r3, #0
 800154a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800154c:	f002 0203 	and.w	r2, r2, #3
 8001550:	0092      	lsls	r2, r2, #2
 8001552:	4093      	lsls	r3, r2
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	4313      	orrs	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800155a:	492f      	ldr	r1, [pc, #188]	; (8001618 <HAL_GPIO_Init+0x2bc>)
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	3302      	adds	r3, #2
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d006      	beq.n	8001582 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001574:	4b2d      	ldr	r3, [pc, #180]	; (800162c <HAL_GPIO_Init+0x2d0>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	492c      	ldr	r1, [pc, #176]	; (800162c <HAL_GPIO_Init+0x2d0>)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	600b      	str	r3, [r1, #0]
 8001580:	e006      	b.n	8001590 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001582:	4b2a      	ldr	r3, [pc, #168]	; (800162c <HAL_GPIO_Init+0x2d0>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	43db      	mvns	r3, r3
 800158a:	4928      	ldr	r1, [pc, #160]	; (800162c <HAL_GPIO_Init+0x2d0>)
 800158c:	4013      	ands	r3, r2
 800158e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d006      	beq.n	80015aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800159c:	4b23      	ldr	r3, [pc, #140]	; (800162c <HAL_GPIO_Init+0x2d0>)
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4922      	ldr	r1, [pc, #136]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]
 80015a8:	e006      	b.n	80015b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	491e      	ldr	r1, [pc, #120]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d006      	beq.n	80015d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015c4:	4b19      	ldr	r3, [pc, #100]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	4918      	ldr	r1, [pc, #96]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	608b      	str	r3, [r1, #8]
 80015d0:	e006      	b.n	80015e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	43db      	mvns	r3, r3
 80015da:	4914      	ldr	r1, [pc, #80]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015dc:	4013      	ands	r3, r2
 80015de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d021      	beq.n	8001630 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	490e      	ldr	r1, [pc, #56]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	60cb      	str	r3, [r1, #12]
 80015f8:	e021      	b.n	800163e <HAL_GPIO_Init+0x2e2>
 80015fa:	bf00      	nop
 80015fc:	10320000 	.word	0x10320000
 8001600:	10310000 	.word	0x10310000
 8001604:	10220000 	.word	0x10220000
 8001608:	10210000 	.word	0x10210000
 800160c:	10120000 	.word	0x10120000
 8001610:	10110000 	.word	0x10110000
 8001614:	40021000 	.word	0x40021000
 8001618:	40010000 	.word	0x40010000
 800161c:	40010800 	.word	0x40010800
 8001620:	40010c00 	.word	0x40010c00
 8001624:	40011000 	.word	0x40011000
 8001628:	40011400 	.word	0x40011400
 800162c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_GPIO_Init+0x304>)
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	43db      	mvns	r3, r3
 8001638:	4909      	ldr	r1, [pc, #36]	; (8001660 <HAL_GPIO_Init+0x304>)
 800163a:	4013      	ands	r3, r2
 800163c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	3301      	adds	r3, #1
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	fa22 f303 	lsr.w	r3, r2, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	f47f ae8e 	bne.w	8001370 <HAL_GPIO_Init+0x14>
  }
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	372c      	adds	r7, #44	; 0x2c
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	40010400 	.word	0x40010400

08001664 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	887b      	ldrh	r3, [r7, #2]
 8001676:	4013      	ands	r3, r2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d002      	beq.n	8001682 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800167c:	2301      	movs	r3, #1
 800167e:	73fb      	strb	r3, [r7, #15]
 8001680:	e001      	b.n	8001686 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001686:	7bfb      	ldrb	r3, [r7, #15]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr

08001692 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	460b      	mov	r3, r1
 800169c:	807b      	strh	r3, [r7, #2]
 800169e:	4613      	mov	r3, r2
 80016a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016a2:	787b      	ldrb	r3, [r7, #1]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016a8:	887a      	ldrh	r2, [r7, #2]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016ae:	e003      	b.n	80016b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016b0:	887b      	ldrh	r3, [r7, #2]
 80016b2:	041a      	lsls	r2, r3, #16
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	611a      	str	r2, [r3, #16]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b085      	sub	sp, #20
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
 80016ca:	460b      	mov	r3, r1
 80016cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016d4:	887a      	ldrh	r2, [r7, #2]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4013      	ands	r3, r2
 80016da:	041a      	lsls	r2, r3, #16
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	43d9      	mvns	r1, r3
 80016e0:	887b      	ldrh	r3, [r7, #2]
 80016e2:	400b      	ands	r3, r1
 80016e4:	431a      	orrs	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	611a      	str	r2, [r3, #16]
}
 80016ea:	bf00      	nop
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001700:	695a      	ldr	r2, [r3, #20]
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	4013      	ands	r3, r2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d006      	beq.n	8001718 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800170a:	4a05      	ldr	r2, [pc, #20]	; (8001720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001710:	88fb      	ldrh	r3, [r7, #6]
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe fd52 	bl	80001bc <HAL_GPIO_EXTI_Callback>
  }
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40010400 	.word	0x40010400

08001724 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e12b      	b.n	800198e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d106      	bne.n	8001750 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff fb3c 	bl	8000dc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2224      	movs	r2, #36	; 0x24
 8001754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0201 	bic.w	r2, r2, #1
 8001766:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001776:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001786:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001788:	f001 f918 	bl	80029bc <HAL_RCC_GetPCLK1Freq>
 800178c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	4a81      	ldr	r2, [pc, #516]	; (8001998 <HAL_I2C_Init+0x274>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d807      	bhi.n	80017a8 <HAL_I2C_Init+0x84>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4a80      	ldr	r2, [pc, #512]	; (800199c <HAL_I2C_Init+0x278>)
 800179c:	4293      	cmp	r3, r2
 800179e:	bf94      	ite	ls
 80017a0:	2301      	movls	r3, #1
 80017a2:	2300      	movhi	r3, #0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	e006      	b.n	80017b6 <HAL_I2C_Init+0x92>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4a7d      	ldr	r2, [pc, #500]	; (80019a0 <HAL_I2C_Init+0x27c>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	bf94      	ite	ls
 80017b0:	2301      	movls	r3, #1
 80017b2:	2300      	movhi	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e0e7      	b.n	800198e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	4a78      	ldr	r2, [pc, #480]	; (80019a4 <HAL_I2C_Init+0x280>)
 80017c2:	fba2 2303 	umull	r2, r3, r2, r3
 80017c6:	0c9b      	lsrs	r3, r3, #18
 80017c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	430a      	orrs	r2, r1
 80017dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	4a6a      	ldr	r2, [pc, #424]	; (8001998 <HAL_I2C_Init+0x274>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d802      	bhi.n	80017f8 <HAL_I2C_Init+0xd4>
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	3301      	adds	r3, #1
 80017f6:	e009      	b.n	800180c <HAL_I2C_Init+0xe8>
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017fe:	fb02 f303 	mul.w	r3, r2, r3
 8001802:	4a69      	ldr	r2, [pc, #420]	; (80019a8 <HAL_I2C_Init+0x284>)
 8001804:	fba2 2303 	umull	r2, r3, r2, r3
 8001808:	099b      	lsrs	r3, r3, #6
 800180a:	3301      	adds	r3, #1
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	430b      	orrs	r3, r1
 8001812:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800181e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	495c      	ldr	r1, [pc, #368]	; (8001998 <HAL_I2C_Init+0x274>)
 8001828:	428b      	cmp	r3, r1
 800182a:	d819      	bhi.n	8001860 <HAL_I2C_Init+0x13c>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	1e59      	subs	r1, r3, #1
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	fbb1 f3f3 	udiv	r3, r1, r3
 800183a:	1c59      	adds	r1, r3, #1
 800183c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001840:	400b      	ands	r3, r1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00a      	beq.n	800185c <HAL_I2C_Init+0x138>
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	1e59      	subs	r1, r3, #1
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	fbb1 f3f3 	udiv	r3, r1, r3
 8001854:	3301      	adds	r3, #1
 8001856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800185a:	e051      	b.n	8001900 <HAL_I2C_Init+0x1dc>
 800185c:	2304      	movs	r3, #4
 800185e:	e04f      	b.n	8001900 <HAL_I2C_Init+0x1dc>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d111      	bne.n	800188c <HAL_I2C_Init+0x168>
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	1e58      	subs	r0, r3, #1
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6859      	ldr	r1, [r3, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	440b      	add	r3, r1
 8001876:	fbb0 f3f3 	udiv	r3, r0, r3
 800187a:	3301      	adds	r3, #1
 800187c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001880:	2b00      	cmp	r3, #0
 8001882:	bf0c      	ite	eq
 8001884:	2301      	moveq	r3, #1
 8001886:	2300      	movne	r3, #0
 8001888:	b2db      	uxtb	r3, r3
 800188a:	e012      	b.n	80018b2 <HAL_I2C_Init+0x18e>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	1e58      	subs	r0, r3, #1
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6859      	ldr	r1, [r3, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	440b      	add	r3, r1
 800189a:	0099      	lsls	r1, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	fbb0 f3f3 	udiv	r3, r0, r3
 80018a2:	3301      	adds	r3, #1
 80018a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	bf0c      	ite	eq
 80018ac:	2301      	moveq	r3, #1
 80018ae:	2300      	movne	r3, #0
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_I2C_Init+0x196>
 80018b6:	2301      	movs	r3, #1
 80018b8:	e022      	b.n	8001900 <HAL_I2C_Init+0x1dc>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10e      	bne.n	80018e0 <HAL_I2C_Init+0x1bc>
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	1e58      	subs	r0, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6859      	ldr	r1, [r3, #4]
 80018ca:	460b      	mov	r3, r1
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	440b      	add	r3, r1
 80018d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80018d4:	3301      	adds	r3, #1
 80018d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018de:	e00f      	b.n	8001900 <HAL_I2C_Init+0x1dc>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	1e58      	subs	r0, r3, #1
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6859      	ldr	r1, [r3, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	0099      	lsls	r1, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018f6:	3301      	adds	r3, #1
 80018f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	6809      	ldr	r1, [r1, #0]
 8001904:	4313      	orrs	r3, r2
 8001906:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69da      	ldr	r2, [r3, #28]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800192e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6911      	ldr	r1, [r2, #16]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	68d2      	ldr	r2, [r2, #12]
 800193a:	4311      	orrs	r1, r2
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6812      	ldr	r2, [r2, #0]
 8001940:	430b      	orrs	r3, r1
 8001942:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	695a      	ldr	r2, [r3, #20]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 0201 	orr.w	r2, r2, #1
 800196e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2220      	movs	r2, #32
 800197a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	000186a0 	.word	0x000186a0
 800199c:	001e847f 	.word	0x001e847f
 80019a0:	003d08ff 	.word	0x003d08ff
 80019a4:	431bde83 	.word	0x431bde83
 80019a8:	10624dd3 	.word	0x10624dd3

080019ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af02      	add	r7, sp, #8
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	607a      	str	r2, [r7, #4]
 80019b6:	461a      	mov	r2, r3
 80019b8:	460b      	mov	r3, r1
 80019ba:	817b      	strh	r3, [r7, #10]
 80019bc:	4613      	mov	r3, r2
 80019be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019c0:	f7ff fb90 	bl	80010e4 <HAL_GetTick>
 80019c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b20      	cmp	r3, #32
 80019d0:	f040 80e0 	bne.w	8001b94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	2319      	movs	r3, #25
 80019da:	2201      	movs	r2, #1
 80019dc:	4970      	ldr	r1, [pc, #448]	; (8001ba0 <HAL_I2C_Master_Transmit+0x1f4>)
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f000 fa92 	bl	8001f08 <I2C_WaitOnFlagUntilTimeout>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80019ea:	2302      	movs	r3, #2
 80019ec:	e0d3      	b.n	8001b96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d101      	bne.n	80019fc <HAL_I2C_Master_Transmit+0x50>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e0cc      	b.n	8001b96 <HAL_I2C_Master_Transmit+0x1ea>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d007      	beq.n	8001a22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f042 0201 	orr.w	r2, r2, #1
 8001a20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2221      	movs	r2, #33	; 0x21
 8001a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2210      	movs	r2, #16
 8001a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	893a      	ldrh	r2, [r7, #8]
 8001a52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4a50      	ldr	r2, [pc, #320]	; (8001ba4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001a62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a64:	8979      	ldrh	r1, [r7, #10]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	6a3a      	ldr	r2, [r7, #32]
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f000 f9ca 	bl	8001e04 <I2C_MasterRequestWrite>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e08d      	b.n	8001b96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a90:	e066      	b.n	8001b60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	6a39      	ldr	r1, [r7, #32]
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f000 fb0c 	bl	80020b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00d      	beq.n	8001abe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d107      	bne.n	8001aba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ab8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e06b      	b.n	8001b96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	781a      	ldrb	r2, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	3b01      	subs	r3, #1
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b04      	cmp	r3, #4
 8001afa:	d11b      	bne.n	8001b34 <HAL_I2C_Master_Transmit+0x188>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d017      	beq.n	8001b34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	781a      	ldrb	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	1c5a      	adds	r2, r3, #1
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	3b01      	subs	r3, #1
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	6a39      	ldr	r1, [r7, #32]
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f000 fafc 	bl	8002136 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00d      	beq.n	8001b60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d107      	bne.n	8001b5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e01a      	b.n	8001b96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d194      	bne.n	8001a92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	e000      	b.n	8001b96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b94:	2302      	movs	r3, #2
  }
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	00100002 	.word	0x00100002
 8001ba4:	ffff0000 	.word	0xffff0000

08001ba8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af02      	add	r7, sp, #8
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001bb8:	f7ff fa94 	bl	80010e4 <HAL_GetTick>
 8001bbc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b20      	cmp	r3, #32
 8001bcc:	f040 8111 	bne.w	8001df2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	2319      	movs	r3, #25
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	4988      	ldr	r1, [pc, #544]	; (8001dfc <HAL_I2C_IsDeviceReady+0x254>)
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 f994 	bl	8001f08 <I2C_WaitOnFlagUntilTimeout>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001be6:	2302      	movs	r3, #2
 8001be8:	e104      	b.n	8001df4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d101      	bne.n	8001bf8 <HAL_I2C_IsDeviceReady+0x50>
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	e0fd      	b.n	8001df4 <HAL_I2C_IsDeviceReady+0x24c>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d007      	beq.n	8001c1e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f042 0201 	orr.w	r2, r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2224      	movs	r2, #36	; 0x24
 8001c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4a70      	ldr	r2, [pc, #448]	; (8001e00 <HAL_I2C_IsDeviceReady+0x258>)
 8001c40:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c50:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f000 f952 	bl	8001f08 <I2C_WaitOnFlagUntilTimeout>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00d      	beq.n	8001c86 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c78:	d103      	bne.n	8001c82 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c80:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e0b6      	b.n	8001df4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c86:	897b      	ldrh	r3, [r7, #10]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c94:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001c96:	f7ff fa25 	bl	80010e4 <HAL_GetTick>
 8001c9a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	bf0c      	ite	eq
 8001caa:	2301      	moveq	r3, #1
 8001cac:	2300      	movne	r3, #0
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cc0:	bf0c      	ite	eq
 8001cc2:	2301      	moveq	r3, #1
 8001cc4:	2300      	movne	r3, #0
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001cca:	e025      	b.n	8001d18 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ccc:	f7ff fa0a 	bl	80010e4 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d302      	bcc.n	8001ce2 <HAL_I2C_IsDeviceReady+0x13a>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d103      	bne.n	8001cea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	22a0      	movs	r2, #160	; 0xa0
 8001ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	bf0c      	ite	eq
 8001cf8:	2301      	moveq	r3, #1
 8001cfa:	2300      	movne	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d0e:	bf0c      	ite	eq
 8001d10:	2301      	moveq	r3, #1
 8001d12:	2300      	movne	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2ba0      	cmp	r3, #160	; 0xa0
 8001d22:	d005      	beq.n	8001d30 <HAL_I2C_IsDeviceReady+0x188>
 8001d24:	7dfb      	ldrb	r3, [r7, #23]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d102      	bne.n	8001d30 <HAL_I2C_IsDeviceReady+0x188>
 8001d2a:	7dbb      	ldrb	r3, [r7, #22]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0cd      	beq.n	8001ccc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2220      	movs	r2, #32
 8001d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d129      	bne.n	8001d9a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d54:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	2319      	movs	r3, #25
 8001d72:	2201      	movs	r2, #1
 8001d74:	4921      	ldr	r1, [pc, #132]	; (8001dfc <HAL_I2C_IsDeviceReady+0x254>)
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f000 f8c6 	bl	8001f08 <I2C_WaitOnFlagUntilTimeout>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e036      	b.n	8001df4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	e02c      	b.n	8001df4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001da8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001db2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	2319      	movs	r3, #25
 8001dba:	2201      	movs	r2, #1
 8001dbc:	490f      	ldr	r1, [pc, #60]	; (8001dfc <HAL_I2C_IsDeviceReady+0x254>)
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f000 f8a2 	bl	8001f08 <I2C_WaitOnFlagUntilTimeout>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e012      	b.n	8001df4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	f4ff af32 	bcc.w	8001c42 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2220      	movs	r2, #32
 8001de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001df2:	2302      	movs	r3, #2
  }
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3720      	adds	r7, #32
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	00100002 	.word	0x00100002
 8001e00:	ffff0000 	.word	0xffff0000

08001e04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af02      	add	r7, sp, #8
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	607a      	str	r2, [r7, #4]
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	460b      	mov	r3, r1
 8001e12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d006      	beq.n	8001e2e <I2C_MasterRequestWrite+0x2a>
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d003      	beq.n	8001e2e <I2C_MasterRequestWrite+0x2a>
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e2c:	d108      	bne.n	8001e40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e00b      	b.n	8001e58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	2b12      	cmp	r3, #18
 8001e46:	d107      	bne.n	8001e58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f000 f84f 	bl	8001f08 <I2C_WaitOnFlagUntilTimeout>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00d      	beq.n	8001e8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e7e:	d103      	bne.n	8001e88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e035      	b.n	8001ef8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e94:	d108      	bne.n	8001ea8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e96:	897b      	ldrh	r3, [r7, #10]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ea4:	611a      	str	r2, [r3, #16]
 8001ea6:	e01b      	b.n	8001ee0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ea8:	897b      	ldrh	r3, [r7, #10]
 8001eaa:	11db      	asrs	r3, r3, #7
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	f003 0306 	and.w	r3, r3, #6
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	f063 030f 	orn	r3, r3, #15
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	490e      	ldr	r1, [pc, #56]	; (8001f00 <I2C_MasterRequestWrite+0xfc>)
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 f875 	bl	8001fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e010      	b.n	8001ef8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ed6:	897b      	ldrh	r3, [r7, #10]
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	4907      	ldr	r1, [pc, #28]	; (8001f04 <I2C_MasterRequestWrite+0x100>)
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 f865 	bl	8001fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	00010008 	.word	0x00010008
 8001f04:	00010002 	.word	0x00010002

08001f08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	603b      	str	r3, [r7, #0]
 8001f14:	4613      	mov	r3, r2
 8001f16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f18:	e025      	b.n	8001f66 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f20:	d021      	beq.n	8001f66 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f22:	f7ff f8df 	bl	80010e4 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d302      	bcc.n	8001f38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d116      	bne.n	8001f66 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2220      	movs	r2, #32
 8001f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f043 0220 	orr.w	r2, r3, #32
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e023      	b.n	8001fae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	0c1b      	lsrs	r3, r3, #16
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d10d      	bne.n	8001f8c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	43da      	mvns	r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	bf0c      	ite	eq
 8001f82:	2301      	moveq	r3, #1
 8001f84:	2300      	movne	r3, #0
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	461a      	mov	r2, r3
 8001f8a:	e00c      	b.n	8001fa6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	43da      	mvns	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	4013      	ands	r3, r2
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	bf0c      	ite	eq
 8001f9e:	2301      	moveq	r3, #1
 8001fa0:	2300      	movne	r3, #0
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d0b6      	beq.n	8001f1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fc4:	e051      	b.n	800206a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fd4:	d123      	bne.n	800201e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fe4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f043 0204 	orr.w	r2, r3, #4
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e046      	b.n	80020ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002024:	d021      	beq.n	800206a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002026:	f7ff f85d 	bl	80010e4 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	429a      	cmp	r2, r3
 8002034:	d302      	bcc.n	800203c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d116      	bne.n	800206a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2220      	movs	r2, #32
 8002046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f043 0220 	orr.w	r2, r3, #32
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e020      	b.n	80020ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	0c1b      	lsrs	r3, r3, #16
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b01      	cmp	r3, #1
 8002072:	d10c      	bne.n	800208e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	43da      	mvns	r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	4013      	ands	r3, r2
 8002080:	b29b      	uxth	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	bf14      	ite	ne
 8002086:	2301      	movne	r3, #1
 8002088:	2300      	moveq	r3, #0
 800208a:	b2db      	uxtb	r3, r3
 800208c:	e00b      	b.n	80020a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	43da      	mvns	r2, r3
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	4013      	ands	r3, r2
 800209a:	b29b      	uxth	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	bf14      	ite	ne
 80020a0:	2301      	movne	r3, #1
 80020a2:	2300      	moveq	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d18d      	bne.n	8001fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020c0:	e02d      	b.n	800211e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 f878 	bl	80021b8 <I2C_IsAcknowledgeFailed>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e02d      	b.n	800212e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d8:	d021      	beq.n	800211e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020da:	f7ff f803 	bl	80010e4 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d302      	bcc.n	80020f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d116      	bne.n	800211e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2220      	movs	r2, #32
 80020fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f043 0220 	orr.w	r2, r3, #32
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e007      	b.n	800212e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002128:	2b80      	cmp	r3, #128	; 0x80
 800212a:	d1ca      	bne.n	80020c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b084      	sub	sp, #16
 800213a:	af00      	add	r7, sp, #0
 800213c:	60f8      	str	r0, [r7, #12]
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002142:	e02d      	b.n	80021a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f000 f837 	bl	80021b8 <I2C_IsAcknowledgeFailed>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e02d      	b.n	80021b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215a:	d021      	beq.n	80021a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800215c:	f7fe ffc2 	bl	80010e4 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	429a      	cmp	r2, r3
 800216a:	d302      	bcc.n	8002172 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d116      	bne.n	80021a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2220      	movs	r2, #32
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	f043 0220 	orr.w	r2, r3, #32
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e007      	b.n	80021b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	f003 0304 	and.w	r3, r3, #4
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d1ca      	bne.n	8002144 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ce:	d11b      	bne.n	8002208 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2220      	movs	r2, #32
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	f043 0204 	orr.w	r2, r3, #4
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e272      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 8087 	beq.w	8002342 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002234:	4b92      	ldr	r3, [pc, #584]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 030c 	and.w	r3, r3, #12
 800223c:	2b04      	cmp	r3, #4
 800223e:	d00c      	beq.n	800225a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002240:	4b8f      	ldr	r3, [pc, #572]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 030c 	and.w	r3, r3, #12
 8002248:	2b08      	cmp	r3, #8
 800224a:	d112      	bne.n	8002272 <HAL_RCC_OscConfig+0x5e>
 800224c:	4b8c      	ldr	r3, [pc, #560]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002258:	d10b      	bne.n	8002272 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225a:	4b89      	ldr	r3, [pc, #548]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d06c      	beq.n	8002340 <HAL_RCC_OscConfig+0x12c>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d168      	bne.n	8002340 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e24c      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800227a:	d106      	bne.n	800228a <HAL_RCC_OscConfig+0x76>
 800227c:	4b80      	ldr	r3, [pc, #512]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a7f      	ldr	r2, [pc, #508]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	e02e      	b.n	80022e8 <HAL_RCC_OscConfig+0xd4>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10c      	bne.n	80022ac <HAL_RCC_OscConfig+0x98>
 8002292:	4b7b      	ldr	r3, [pc, #492]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a7a      	ldr	r2, [pc, #488]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	4b78      	ldr	r3, [pc, #480]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a77      	ldr	r2, [pc, #476]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	e01d      	b.n	80022e8 <HAL_RCC_OscConfig+0xd4>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022b4:	d10c      	bne.n	80022d0 <HAL_RCC_OscConfig+0xbc>
 80022b6:	4b72      	ldr	r3, [pc, #456]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a71      	ldr	r2, [pc, #452]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	4b6f      	ldr	r3, [pc, #444]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a6e      	ldr	r2, [pc, #440]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	e00b      	b.n	80022e8 <HAL_RCC_OscConfig+0xd4>
 80022d0:	4b6b      	ldr	r3, [pc, #428]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a6a      	ldr	r2, [pc, #424]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022da:	6013      	str	r3, [r2, #0]
 80022dc:	4b68      	ldr	r3, [pc, #416]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a67      	ldr	r2, [pc, #412]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d013      	beq.n	8002318 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f0:	f7fe fef8 	bl	80010e4 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f8:	f7fe fef4 	bl	80010e4 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	; 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e200      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230a:	4b5d      	ldr	r3, [pc, #372]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCC_OscConfig+0xe4>
 8002316:	e014      	b.n	8002342 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002318:	f7fe fee4 	bl	80010e4 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002320:	f7fe fee0 	bl	80010e4 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b64      	cmp	r3, #100	; 0x64
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e1ec      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002332:	4b53      	ldr	r3, [pc, #332]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x10c>
 800233e:	e000      	b.n	8002342 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d063      	beq.n	8002416 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800234e:	4b4c      	ldr	r3, [pc, #304]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00b      	beq.n	8002372 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800235a:	4b49      	ldr	r3, [pc, #292]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b08      	cmp	r3, #8
 8002364:	d11c      	bne.n	80023a0 <HAL_RCC_OscConfig+0x18c>
 8002366:	4b46      	ldr	r3, [pc, #280]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d116      	bne.n	80023a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002372:	4b43      	ldr	r3, [pc, #268]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d005      	beq.n	800238a <HAL_RCC_OscConfig+0x176>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d001      	beq.n	800238a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e1c0      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238a:	4b3d      	ldr	r3, [pc, #244]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	4939      	ldr	r1, [pc, #228]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 800239a:	4313      	orrs	r3, r2
 800239c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800239e:	e03a      	b.n	8002416 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d020      	beq.n	80023ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a8:	4b36      	ldr	r3, [pc, #216]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ae:	f7fe fe99 	bl	80010e4 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b6:	f7fe fe95 	bl	80010e4 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e1a1      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c8:	4b2d      	ldr	r3, [pc, #180]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d4:	4b2a      	ldr	r3, [pc, #168]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	4927      	ldr	r1, [pc, #156]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	600b      	str	r3, [r1, #0]
 80023e8:	e015      	b.n	8002416 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ea:	4b26      	ldr	r3, [pc, #152]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7fe fe78 	bl	80010e4 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f8:	f7fe fe74 	bl	80010e4 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e180      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800240a:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f0      	bne.n	80023f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d03a      	beq.n	8002498 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d019      	beq.n	800245e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800242a:	4b17      	ldr	r3, [pc, #92]	; (8002488 <HAL_RCC_OscConfig+0x274>)
 800242c:	2201      	movs	r2, #1
 800242e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002430:	f7fe fe58 	bl	80010e4 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002438:	f7fe fe54 	bl	80010e4 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e160      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244a:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002456:	2001      	movs	r0, #1
 8002458:	f000 fac4 	bl	80029e4 <RCC_Delay>
 800245c:	e01c      	b.n	8002498 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800245e:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <HAL_RCC_OscConfig+0x274>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002464:	f7fe fe3e 	bl	80010e4 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800246a:	e00f      	b.n	800248c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246c:	f7fe fe3a 	bl	80010e4 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d908      	bls.n	800248c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e146      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000
 8002484:	42420000 	.word	0x42420000
 8002488:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800248c:	4b92      	ldr	r3, [pc, #584]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1e9      	bne.n	800246c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80a6 	beq.w	80025f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a6:	2300      	movs	r3, #0
 80024a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024aa:	4b8b      	ldr	r3, [pc, #556]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10d      	bne.n	80024d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b6:	4b88      	ldr	r3, [pc, #544]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	4a87      	ldr	r2, [pc, #540]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c0:	61d3      	str	r3, [r2, #28]
 80024c2:	4b85      	ldr	r3, [pc, #532]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ce:	2301      	movs	r3, #1
 80024d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d2:	4b82      	ldr	r3, [pc, #520]	; (80026dc <HAL_RCC_OscConfig+0x4c8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d118      	bne.n	8002510 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024de:	4b7f      	ldr	r3, [pc, #508]	; (80026dc <HAL_RCC_OscConfig+0x4c8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a7e      	ldr	r2, [pc, #504]	; (80026dc <HAL_RCC_OscConfig+0x4c8>)
 80024e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ea:	f7fe fdfb 	bl	80010e4 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f2:	f7fe fdf7 	bl	80010e4 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b64      	cmp	r3, #100	; 0x64
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e103      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002504:	4b75      	ldr	r3, [pc, #468]	; (80026dc <HAL_RCC_OscConfig+0x4c8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d106      	bne.n	8002526 <HAL_RCC_OscConfig+0x312>
 8002518:	4b6f      	ldr	r3, [pc, #444]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	4a6e      	ldr	r2, [pc, #440]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	6213      	str	r3, [r2, #32]
 8002524:	e02d      	b.n	8002582 <HAL_RCC_OscConfig+0x36e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10c      	bne.n	8002548 <HAL_RCC_OscConfig+0x334>
 800252e:	4b6a      	ldr	r3, [pc, #424]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	4a69      	ldr	r2, [pc, #420]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002534:	f023 0301 	bic.w	r3, r3, #1
 8002538:	6213      	str	r3, [r2, #32]
 800253a:	4b67      	ldr	r3, [pc, #412]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	4a66      	ldr	r2, [pc, #408]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002540:	f023 0304 	bic.w	r3, r3, #4
 8002544:	6213      	str	r3, [r2, #32]
 8002546:	e01c      	b.n	8002582 <HAL_RCC_OscConfig+0x36e>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	2b05      	cmp	r3, #5
 800254e:	d10c      	bne.n	800256a <HAL_RCC_OscConfig+0x356>
 8002550:	4b61      	ldr	r3, [pc, #388]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	4a60      	ldr	r2, [pc, #384]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002556:	f043 0304 	orr.w	r3, r3, #4
 800255a:	6213      	str	r3, [r2, #32]
 800255c:	4b5e      	ldr	r3, [pc, #376]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	4a5d      	ldr	r2, [pc, #372]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	6213      	str	r3, [r2, #32]
 8002568:	e00b      	b.n	8002582 <HAL_RCC_OscConfig+0x36e>
 800256a:	4b5b      	ldr	r3, [pc, #364]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	4a5a      	ldr	r2, [pc, #360]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002570:	f023 0301 	bic.w	r3, r3, #1
 8002574:	6213      	str	r3, [r2, #32]
 8002576:	4b58      	ldr	r3, [pc, #352]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	4a57      	ldr	r2, [pc, #348]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 800257c:	f023 0304 	bic.w	r3, r3, #4
 8002580:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d015      	beq.n	80025b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258a:	f7fe fdab 	bl	80010e4 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002590:	e00a      	b.n	80025a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7fe fda7 	bl	80010e4 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e0b1      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a8:	4b4b      	ldr	r3, [pc, #300]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0ee      	beq.n	8002592 <HAL_RCC_OscConfig+0x37e>
 80025b4:	e014      	b.n	80025e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b6:	f7fe fd95 	bl	80010e4 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025bc:	e00a      	b.n	80025d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025be:	f7fe fd91 	bl	80010e4 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e09b      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d4:	4b40      	ldr	r3, [pc, #256]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1ee      	bne.n	80025be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025e0:	7dfb      	ldrb	r3, [r7, #23]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d105      	bne.n	80025f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e6:	4b3c      	ldr	r3, [pc, #240]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	4a3b      	ldr	r2, [pc, #236]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 8087 	beq.w	800270a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025fc:	4b36      	ldr	r3, [pc, #216]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 030c 	and.w	r3, r3, #12
 8002604:	2b08      	cmp	r3, #8
 8002606:	d061      	beq.n	80026cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	2b02      	cmp	r3, #2
 800260e:	d146      	bne.n	800269e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002610:	4b33      	ldr	r3, [pc, #204]	; (80026e0 <HAL_RCC_OscConfig+0x4cc>)
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002616:	f7fe fd65 	bl	80010e4 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261e:	f7fe fd61 	bl	80010e4 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e06d      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002630:	4b29      	ldr	r3, [pc, #164]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1f0      	bne.n	800261e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002644:	d108      	bne.n	8002658 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002646:	4b24      	ldr	r3, [pc, #144]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	4921      	ldr	r1, [pc, #132]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002654:	4313      	orrs	r3, r2
 8002656:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002658:	4b1f      	ldr	r3, [pc, #124]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a19      	ldr	r1, [r3, #32]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	430b      	orrs	r3, r1
 800266a:	491b      	ldr	r1, [pc, #108]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 800266c:	4313      	orrs	r3, r2
 800266e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002670:	4b1b      	ldr	r3, [pc, #108]	; (80026e0 <HAL_RCC_OscConfig+0x4cc>)
 8002672:	2201      	movs	r2, #1
 8002674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002676:	f7fe fd35 	bl	80010e4 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267e:	f7fe fd31 	bl	80010e4 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e03d      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002690:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0f0      	beq.n	800267e <HAL_RCC_OscConfig+0x46a>
 800269c:	e035      	b.n	800270a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269e:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <HAL_RCC_OscConfig+0x4cc>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7fe fd1e 	bl	80010e4 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ac:	f7fe fd1a 	bl	80010e4 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e026      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026be:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x498>
 80026ca:	e01e      	b.n	800270a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d107      	bne.n	80026e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e019      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40007000 	.word	0x40007000
 80026e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_RCC_OscConfig+0x500>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d106      	bne.n	8002706 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002702:	429a      	cmp	r2, r3
 8002704:	d001      	beq.n	800270a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40021000 	.word	0x40021000

08002718 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0d0      	b.n	80028ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800272c:	4b6a      	ldr	r3, [pc, #424]	; (80028d8 <HAL_RCC_ClockConfig+0x1c0>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d910      	bls.n	800275c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273a:	4b67      	ldr	r3, [pc, #412]	; (80028d8 <HAL_RCC_ClockConfig+0x1c0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 0207 	bic.w	r2, r3, #7
 8002742:	4965      	ldr	r1, [pc, #404]	; (80028d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	4313      	orrs	r3, r2
 8002748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800274a:	4b63      	ldr	r3, [pc, #396]	; (80028d8 <HAL_RCC_ClockConfig+0x1c0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d001      	beq.n	800275c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0b8      	b.n	80028ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d020      	beq.n	80027aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002774:	4b59      	ldr	r3, [pc, #356]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	4a58      	ldr	r2, [pc, #352]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800277e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800278c:	4b53      	ldr	r3, [pc, #332]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	4a52      	ldr	r2, [pc, #328]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002796:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002798:	4b50      	ldr	r3, [pc, #320]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	494d      	ldr	r1, [pc, #308]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d040      	beq.n	8002838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d107      	bne.n	80027ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027be:	4b47      	ldr	r3, [pc, #284]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d115      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e07f      	b.n	80028ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d107      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d6:	4b41      	ldr	r3, [pc, #260]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e073      	b.n	80028ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e6:	4b3d      	ldr	r3, [pc, #244]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e06b      	b.n	80028ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027f6:	4b39      	ldr	r3, [pc, #228]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f023 0203 	bic.w	r2, r3, #3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	4936      	ldr	r1, [pc, #216]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 8002804:	4313      	orrs	r3, r2
 8002806:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002808:	f7fe fc6c 	bl	80010e4 <HAL_GetTick>
 800280c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280e:	e00a      	b.n	8002826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002810:	f7fe fc68 	bl	80010e4 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	f241 3288 	movw	r2, #5000	; 0x1388
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e053      	b.n	80028ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002826:	4b2d      	ldr	r3, [pc, #180]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 020c 	and.w	r2, r3, #12
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	429a      	cmp	r2, r3
 8002836:	d1eb      	bne.n	8002810 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002838:	4b27      	ldr	r3, [pc, #156]	; (80028d8 <HAL_RCC_ClockConfig+0x1c0>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d210      	bcs.n	8002868 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002846:	4b24      	ldr	r3, [pc, #144]	; (80028d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f023 0207 	bic.w	r2, r3, #7
 800284e:	4922      	ldr	r1, [pc, #136]	; (80028d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	4313      	orrs	r3, r2
 8002854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002856:	4b20      	ldr	r3, [pc, #128]	; (80028d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d001      	beq.n	8002868 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e032      	b.n	80028ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002874:	4b19      	ldr	r3, [pc, #100]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	4916      	ldr	r1, [pc, #88]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 8002882:	4313      	orrs	r3, r2
 8002884:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d009      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002892:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	490e      	ldr	r1, [pc, #56]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028a6:	f000 f821 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 80028aa:	4602      	mov	r2, r0
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	091b      	lsrs	r3, r3, #4
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	490a      	ldr	r1, [pc, #40]	; (80028e0 <HAL_RCC_ClockConfig+0x1c8>)
 80028b8:	5ccb      	ldrb	r3, [r1, r3]
 80028ba:	fa22 f303 	lsr.w	r3, r2, r3
 80028be:	4a09      	ldr	r2, [pc, #36]	; (80028e4 <HAL_RCC_ClockConfig+0x1cc>)
 80028c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028c2:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <HAL_RCC_ClockConfig+0x1d0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe fbca 	bl	8001060 <HAL_InitTick>

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40022000 	.word	0x40022000
 80028dc:	40021000 	.word	0x40021000
 80028e0:	08005088 	.word	0x08005088
 80028e4:	20000010 	.word	0x20000010
 80028e8:	20000014 	.word	0x20000014

080028ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ec:	b490      	push	{r4, r7}
 80028ee:	b08a      	sub	sp, #40	; 0x28
 80028f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028f2:	4b29      	ldr	r3, [pc, #164]	; (8002998 <HAL_RCC_GetSysClockFreq+0xac>)
 80028f4:	1d3c      	adds	r4, r7, #4
 80028f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028fc:	f240 2301 	movw	r3, #513	; 0x201
 8002900:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	2300      	movs	r3, #0
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	2300      	movs	r3, #0
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002916:	4b21      	ldr	r3, [pc, #132]	; (800299c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	2b04      	cmp	r3, #4
 8002924:	d002      	beq.n	800292c <HAL_RCC_GetSysClockFreq+0x40>
 8002926:	2b08      	cmp	r3, #8
 8002928:	d003      	beq.n	8002932 <HAL_RCC_GetSysClockFreq+0x46>
 800292a:	e02b      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800292c:	4b1c      	ldr	r3, [pc, #112]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800292e:	623b      	str	r3, [r7, #32]
      break;
 8002930:	e02b      	b.n	800298a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	0c9b      	lsrs	r3, r3, #18
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	3328      	adds	r3, #40	; 0x28
 800293c:	443b      	add	r3, r7
 800293e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002942:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d012      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800294e:	4b13      	ldr	r3, [pc, #76]	; (800299c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	0c5b      	lsrs	r3, r3, #17
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	3328      	adds	r3, #40	; 0x28
 800295a:	443b      	add	r3, r7
 800295c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002960:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	4a0e      	ldr	r2, [pc, #56]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002966:	fb03 f202 	mul.w	r2, r3, r2
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
 8002972:	e004      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	4a0b      	ldr	r2, [pc, #44]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002978:	fb02 f303 	mul.w	r3, r2, r3
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	623b      	str	r3, [r7, #32]
      break;
 8002982:	e002      	b.n	800298a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002984:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002986:	623b      	str	r3, [r7, #32]
      break;
 8002988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800298a:	6a3b      	ldr	r3, [r7, #32]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3728      	adds	r7, #40	; 0x28
 8002990:	46bd      	mov	sp, r7
 8002992:	bc90      	pop	{r4, r7}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	08003bb0 	.word	0x08003bb0
 800299c:	40021000 	.word	0x40021000
 80029a0:	007a1200 	.word	0x007a1200
 80029a4:	003d0900 	.word	0x003d0900

080029a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029ac:	4b02      	ldr	r3, [pc, #8]	; (80029b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80029ae:	681b      	ldr	r3, [r3, #0]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr
 80029b8:	20000010 	.word	0x20000010

080029bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029c0:	f7ff fff2 	bl	80029a8 <HAL_RCC_GetHCLKFreq>
 80029c4:	4602      	mov	r2, r0
 80029c6:	4b05      	ldr	r3, [pc, #20]	; (80029dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	0a1b      	lsrs	r3, r3, #8
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	4903      	ldr	r1, [pc, #12]	; (80029e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029d2:	5ccb      	ldrb	r3, [r1, r3]
 80029d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d8:	4618      	mov	r0, r3
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40021000 	.word	0x40021000
 80029e0:	08005098 	.word	0x08005098

080029e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029ec:	4b0a      	ldr	r3, [pc, #40]	; (8002a18 <RCC_Delay+0x34>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <RCC_Delay+0x38>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	0a5b      	lsrs	r3, r3, #9
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	fb02 f303 	mul.w	r3, r2, r3
 80029fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a00:	bf00      	nop
  }
  while (Delay --);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	1e5a      	subs	r2, r3, #1
 8002a06:	60fa      	str	r2, [r7, #12]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1f9      	bne.n	8002a00 <RCC_Delay+0x1c>
}
 8002a0c:	bf00      	nop
 8002a0e:	bf00      	nop
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr
 8002a18:	20000010 	.word	0x20000010
 8002a1c:	10624dd3 	.word	0x10624dd3

08002a20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e041      	b.n	8002ab6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d106      	bne.n	8002a4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7fe f9fc 	bl	8000e44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3304      	adds	r3, #4
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4610      	mov	r0, r2
 8002a60:	f000 fa70 	bl	8002f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d001      	beq.n	8002ad8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e03a      	b.n	8002b4e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a18      	ldr	r2, [pc, #96]	; (8002b58 <HAL_TIM_Base_Start_IT+0x98>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00e      	beq.n	8002b18 <HAL_TIM_Base_Start_IT+0x58>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b02:	d009      	beq.n	8002b18 <HAL_TIM_Base_Start_IT+0x58>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a14      	ldr	r2, [pc, #80]	; (8002b5c <HAL_TIM_Base_Start_IT+0x9c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d004      	beq.n	8002b18 <HAL_TIM_Base_Start_IT+0x58>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a13      	ldr	r2, [pc, #76]	; (8002b60 <HAL_TIM_Base_Start_IT+0xa0>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d111      	bne.n	8002b3c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2b06      	cmp	r3, #6
 8002b28:	d010      	beq.n	8002b4c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0201 	orr.w	r2, r2, #1
 8002b38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b3a:	e007      	b.n	8002b4c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0201 	orr.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr
 8002b58:	40012c00 	.word	0x40012c00
 8002b5c:	40000400 	.word	0x40000400
 8002b60:	40000800 	.word	0x40000800

08002b64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d122      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d11b      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0202 	mvn.w	r2, #2
 8002b90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f9b1 	bl	8002f0e <HAL_TIM_IC_CaptureCallback>
 8002bac:	e005      	b.n	8002bba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f9a4 	bl	8002efc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f9b3 	bl	8002f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d122      	bne.n	8002c14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d11b      	bne.n	8002c14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0204 	mvn.w	r2, #4
 8002be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2202      	movs	r2, #2
 8002bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f987 	bl	8002f0e <HAL_TIM_IC_CaptureCallback>
 8002c00:	e005      	b.n	8002c0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f97a 	bl	8002efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f989 	bl	8002f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d122      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0308 	and.w	r3, r3, #8
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d11b      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0208 	mvn.w	r2, #8
 8002c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2204      	movs	r2, #4
 8002c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f95d 	bl	8002f0e <HAL_TIM_IC_CaptureCallback>
 8002c54:	e005      	b.n	8002c62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f950 	bl	8002efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f95f 	bl	8002f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	2b10      	cmp	r3, #16
 8002c74:	d122      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0310 	and.w	r3, r3, #16
 8002c80:	2b10      	cmp	r3, #16
 8002c82:	d11b      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0210 	mvn.w	r2, #16
 8002c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2208      	movs	r2, #8
 8002c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f933 	bl	8002f0e <HAL_TIM_IC_CaptureCallback>
 8002ca8:	e005      	b.n	8002cb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f926 	bl	8002efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f935 	bl	8002f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d10e      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d107      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0201 	mvn.w	r2, #1
 8002ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7fd fa32 	bl	800014c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf2:	2b80      	cmp	r3, #128	; 0x80
 8002cf4:	d10e      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d00:	2b80      	cmp	r3, #128	; 0x80
 8002d02:	d107      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 fa77 	bl	8003202 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1e:	2b40      	cmp	r3, #64	; 0x40
 8002d20:	d10e      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2c:	2b40      	cmp	r3, #64	; 0x40
 8002d2e:	d107      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f8f9 	bl	8002f32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f003 0320 	and.w	r3, r3, #32
 8002d4a:	2b20      	cmp	r3, #32
 8002d4c:	d10e      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f003 0320 	and.w	r3, r3, #32
 8002d58:	2b20      	cmp	r3, #32
 8002d5a:	d107      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f06f 0220 	mvn.w	r2, #32
 8002d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fa42 	bl	80031f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d6c:	bf00      	nop
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_TIM_ConfigClockSource+0x18>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e0b3      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x180>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002daa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002db2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dc4:	d03e      	beq.n	8002e44 <HAL_TIM_ConfigClockSource+0xd0>
 8002dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dca:	f200 8087 	bhi.w	8002edc <HAL_TIM_ConfigClockSource+0x168>
 8002dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd2:	f000 8085 	beq.w	8002ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8002dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dda:	d87f      	bhi.n	8002edc <HAL_TIM_ConfigClockSource+0x168>
 8002ddc:	2b70      	cmp	r3, #112	; 0x70
 8002dde:	d01a      	beq.n	8002e16 <HAL_TIM_ConfigClockSource+0xa2>
 8002de0:	2b70      	cmp	r3, #112	; 0x70
 8002de2:	d87b      	bhi.n	8002edc <HAL_TIM_ConfigClockSource+0x168>
 8002de4:	2b60      	cmp	r3, #96	; 0x60
 8002de6:	d050      	beq.n	8002e8a <HAL_TIM_ConfigClockSource+0x116>
 8002de8:	2b60      	cmp	r3, #96	; 0x60
 8002dea:	d877      	bhi.n	8002edc <HAL_TIM_ConfigClockSource+0x168>
 8002dec:	2b50      	cmp	r3, #80	; 0x50
 8002dee:	d03c      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0xf6>
 8002df0:	2b50      	cmp	r3, #80	; 0x50
 8002df2:	d873      	bhi.n	8002edc <HAL_TIM_ConfigClockSource+0x168>
 8002df4:	2b40      	cmp	r3, #64	; 0x40
 8002df6:	d058      	beq.n	8002eaa <HAL_TIM_ConfigClockSource+0x136>
 8002df8:	2b40      	cmp	r3, #64	; 0x40
 8002dfa:	d86f      	bhi.n	8002edc <HAL_TIM_ConfigClockSource+0x168>
 8002dfc:	2b30      	cmp	r3, #48	; 0x30
 8002dfe:	d064      	beq.n	8002eca <HAL_TIM_ConfigClockSource+0x156>
 8002e00:	2b30      	cmp	r3, #48	; 0x30
 8002e02:	d86b      	bhi.n	8002edc <HAL_TIM_ConfigClockSource+0x168>
 8002e04:	2b20      	cmp	r3, #32
 8002e06:	d060      	beq.n	8002eca <HAL_TIM_ConfigClockSource+0x156>
 8002e08:	2b20      	cmp	r3, #32
 8002e0a:	d867      	bhi.n	8002edc <HAL_TIM_ConfigClockSource+0x168>
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d05c      	beq.n	8002eca <HAL_TIM_ConfigClockSource+0x156>
 8002e10:	2b10      	cmp	r3, #16
 8002e12:	d05a      	beq.n	8002eca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e14:	e062      	b.n	8002edc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	6899      	ldr	r1, [r3, #8]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f000 f966 	bl	80030f6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e38:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	609a      	str	r2, [r3, #8]
      break;
 8002e42:	e04e      	b.n	8002ee2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6818      	ldr	r0, [r3, #0]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	6899      	ldr	r1, [r3, #8]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f000 f94f 	bl	80030f6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e66:	609a      	str	r2, [r3, #8]
      break;
 8002e68:	e03b      	b.n	8002ee2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6818      	ldr	r0, [r3, #0]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	6859      	ldr	r1, [r3, #4]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	461a      	mov	r2, r3
 8002e78:	f000 f8c6 	bl	8003008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2150      	movs	r1, #80	; 0x50
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 f91d 	bl	80030c2 <TIM_ITRx_SetConfig>
      break;
 8002e88:	e02b      	b.n	8002ee2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	6859      	ldr	r1, [r3, #4]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	461a      	mov	r2, r3
 8002e98:	f000 f8e4 	bl	8003064 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2160      	movs	r1, #96	; 0x60
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 f90d 	bl	80030c2 <TIM_ITRx_SetConfig>
      break;
 8002ea8:	e01b      	b.n	8002ee2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	6859      	ldr	r1, [r3, #4]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f000 f8a6 	bl	8003008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2140      	movs	r1, #64	; 0x40
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 f8fd 	bl	80030c2 <TIM_ITRx_SetConfig>
      break;
 8002ec8:	e00b      	b.n	8002ee2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	f000 f8f4 	bl	80030c2 <TIM_ITRx_SetConfig>
        break;
 8002eda:	e002      	b.n	8002ee2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002edc:	bf00      	nop
 8002ede:	e000      	b.n	8002ee2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ee0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc80      	pop	{r7}
 8002f0c:	4770      	bx	lr

08002f0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr

08002f20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr

08002f32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr

08002f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a29      	ldr	r2, [pc, #164]	; (8002ffc <TIM_Base_SetConfig+0xb8>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d00b      	beq.n	8002f74 <TIM_Base_SetConfig+0x30>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f62:	d007      	beq.n	8002f74 <TIM_Base_SetConfig+0x30>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a26      	ldr	r2, [pc, #152]	; (8003000 <TIM_Base_SetConfig+0xbc>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d003      	beq.n	8002f74 <TIM_Base_SetConfig+0x30>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a25      	ldr	r2, [pc, #148]	; (8003004 <TIM_Base_SetConfig+0xc0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d108      	bne.n	8002f86 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a1c      	ldr	r2, [pc, #112]	; (8002ffc <TIM_Base_SetConfig+0xb8>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d00b      	beq.n	8002fa6 <TIM_Base_SetConfig+0x62>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f94:	d007      	beq.n	8002fa6 <TIM_Base_SetConfig+0x62>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a19      	ldr	r2, [pc, #100]	; (8003000 <TIM_Base_SetConfig+0xbc>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d003      	beq.n	8002fa6 <TIM_Base_SetConfig+0x62>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a18      	ldr	r2, [pc, #96]	; (8003004 <TIM_Base_SetConfig+0xc0>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d108      	bne.n	8002fb8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a07      	ldr	r2, [pc, #28]	; (8002ffc <TIM_Base_SetConfig+0xb8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d103      	bne.n	8002fec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	615a      	str	r2, [r3, #20]
}
 8002ff2:	bf00      	nop
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr
 8002ffc:	40012c00 	.word	0x40012c00
 8003000:	40000400 	.word	0x40000400
 8003004:	40000800 	.word	0x40000800

08003008 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	f023 0201 	bic.w	r2, r3, #1
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	4313      	orrs	r3, r2
 800303c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f023 030a 	bic.w	r3, r3, #10
 8003044:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	4313      	orrs	r3, r2
 800304c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	621a      	str	r2, [r3, #32]
}
 800305a:	bf00      	nop
 800305c:	371c      	adds	r7, #28
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr

08003064 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003064:	b480      	push	{r7}
 8003066:	b087      	sub	sp, #28
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	f023 0210 	bic.w	r2, r3, #16
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800308e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	031b      	lsls	r3, r3, #12
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	4313      	orrs	r3, r2
 8003098:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	621a      	str	r2, [r3, #32]
}
 80030b8:	bf00      	nop
 80030ba:	371c      	adds	r7, #28
 80030bc:	46bd      	mov	sp, r7
 80030be:	bc80      	pop	{r7}
 80030c0:	4770      	bx	lr

080030c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b085      	sub	sp, #20
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4313      	orrs	r3, r2
 80030e0:	f043 0307 	orr.w	r3, r3, #7
 80030e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	609a      	str	r2, [r3, #8]
}
 80030ec:	bf00      	nop
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc80      	pop	{r7}
 80030f4:	4770      	bx	lr

080030f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b087      	sub	sp, #28
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
 8003102:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003110:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	021a      	lsls	r2, r3, #8
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	431a      	orrs	r2, r3
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	4313      	orrs	r3, r2
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4313      	orrs	r3, r2
 8003122:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	609a      	str	r2, [r3, #8]
}
 800312a:	bf00      	nop
 800312c:	371c      	adds	r7, #28
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr

08003134 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003148:	2302      	movs	r3, #2
 800314a:	e046      	b.n	80031da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003172:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4313      	orrs	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a16      	ldr	r2, [pc, #88]	; (80031e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d00e      	beq.n	80031ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003198:	d009      	beq.n	80031ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a12      	ldr	r2, [pc, #72]	; (80031e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d004      	beq.n	80031ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a10      	ldr	r2, [pc, #64]	; (80031ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d10c      	bne.n	80031c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	4313      	orrs	r3, r2
 80031be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr
 80031e4:	40012c00 	.word	0x40012c00
 80031e8:	40000400 	.word	0x40000400
 80031ec:	40000800 	.word	0x40000800

080031f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr

08003202 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <__errno>:
 8003214:	4b01      	ldr	r3, [pc, #4]	; (800321c <__errno+0x8>)
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	2000001c 	.word	0x2000001c

08003220 <__libc_init_array>:
 8003220:	b570      	push	{r4, r5, r6, lr}
 8003222:	2600      	movs	r6, #0
 8003224:	4d0c      	ldr	r5, [pc, #48]	; (8003258 <__libc_init_array+0x38>)
 8003226:	4c0d      	ldr	r4, [pc, #52]	; (800325c <__libc_init_array+0x3c>)
 8003228:	1b64      	subs	r4, r4, r5
 800322a:	10a4      	asrs	r4, r4, #2
 800322c:	42a6      	cmp	r6, r4
 800322e:	d109      	bne.n	8003244 <__libc_init_array+0x24>
 8003230:	f000 fc9c 	bl	8003b6c <_init>
 8003234:	2600      	movs	r6, #0
 8003236:	4d0a      	ldr	r5, [pc, #40]	; (8003260 <__libc_init_array+0x40>)
 8003238:	4c0a      	ldr	r4, [pc, #40]	; (8003264 <__libc_init_array+0x44>)
 800323a:	1b64      	subs	r4, r4, r5
 800323c:	10a4      	asrs	r4, r4, #2
 800323e:	42a6      	cmp	r6, r4
 8003240:	d105      	bne.n	800324e <__libc_init_array+0x2e>
 8003242:	bd70      	pop	{r4, r5, r6, pc}
 8003244:	f855 3b04 	ldr.w	r3, [r5], #4
 8003248:	4798      	blx	r3
 800324a:	3601      	adds	r6, #1
 800324c:	e7ee      	b.n	800322c <__libc_init_array+0xc>
 800324e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003252:	4798      	blx	r3
 8003254:	3601      	adds	r6, #1
 8003256:	e7f2      	b.n	800323e <__libc_init_array+0x1e>
 8003258:	080050d4 	.word	0x080050d4
 800325c:	080050d4 	.word	0x080050d4
 8003260:	080050d4 	.word	0x080050d4
 8003264:	080050d8 	.word	0x080050d8

08003268 <memset>:
 8003268:	4603      	mov	r3, r0
 800326a:	4402      	add	r2, r0
 800326c:	4293      	cmp	r3, r2
 800326e:	d100      	bne.n	8003272 <memset+0xa>
 8003270:	4770      	bx	lr
 8003272:	f803 1b01 	strb.w	r1, [r3], #1
 8003276:	e7f9      	b.n	800326c <memset+0x4>

08003278 <siprintf>:
 8003278:	b40e      	push	{r1, r2, r3}
 800327a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800327e:	b500      	push	{lr}
 8003280:	b09c      	sub	sp, #112	; 0x70
 8003282:	ab1d      	add	r3, sp, #116	; 0x74
 8003284:	9002      	str	r0, [sp, #8]
 8003286:	9006      	str	r0, [sp, #24]
 8003288:	9107      	str	r1, [sp, #28]
 800328a:	9104      	str	r1, [sp, #16]
 800328c:	4808      	ldr	r0, [pc, #32]	; (80032b0 <siprintf+0x38>)
 800328e:	4909      	ldr	r1, [pc, #36]	; (80032b4 <siprintf+0x3c>)
 8003290:	f853 2b04 	ldr.w	r2, [r3], #4
 8003294:	9105      	str	r1, [sp, #20]
 8003296:	6800      	ldr	r0, [r0, #0]
 8003298:	a902      	add	r1, sp, #8
 800329a:	9301      	str	r3, [sp, #4]
 800329c:	f000 f868 	bl	8003370 <_svfiprintf_r>
 80032a0:	2200      	movs	r2, #0
 80032a2:	9b02      	ldr	r3, [sp, #8]
 80032a4:	701a      	strb	r2, [r3, #0]
 80032a6:	b01c      	add	sp, #112	; 0x70
 80032a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80032ac:	b003      	add	sp, #12
 80032ae:	4770      	bx	lr
 80032b0:	2000001c 	.word	0x2000001c
 80032b4:	ffff0208 	.word	0xffff0208

080032b8 <__ssputs_r>:
 80032b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032bc:	688e      	ldr	r6, [r1, #8]
 80032be:	4682      	mov	sl, r0
 80032c0:	429e      	cmp	r6, r3
 80032c2:	460c      	mov	r4, r1
 80032c4:	4690      	mov	r8, r2
 80032c6:	461f      	mov	r7, r3
 80032c8:	d838      	bhi.n	800333c <__ssputs_r+0x84>
 80032ca:	898a      	ldrh	r2, [r1, #12]
 80032cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032d0:	d032      	beq.n	8003338 <__ssputs_r+0x80>
 80032d2:	6825      	ldr	r5, [r4, #0]
 80032d4:	6909      	ldr	r1, [r1, #16]
 80032d6:	3301      	adds	r3, #1
 80032d8:	eba5 0901 	sub.w	r9, r5, r1
 80032dc:	6965      	ldr	r5, [r4, #20]
 80032de:	444b      	add	r3, r9
 80032e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032e8:	106d      	asrs	r5, r5, #1
 80032ea:	429d      	cmp	r5, r3
 80032ec:	bf38      	it	cc
 80032ee:	461d      	movcc	r5, r3
 80032f0:	0553      	lsls	r3, r2, #21
 80032f2:	d531      	bpl.n	8003358 <__ssputs_r+0xa0>
 80032f4:	4629      	mov	r1, r5
 80032f6:	f000 fb6f 	bl	80039d8 <_malloc_r>
 80032fa:	4606      	mov	r6, r0
 80032fc:	b950      	cbnz	r0, 8003314 <__ssputs_r+0x5c>
 80032fe:	230c      	movs	r3, #12
 8003300:	f04f 30ff 	mov.w	r0, #4294967295
 8003304:	f8ca 3000 	str.w	r3, [sl]
 8003308:	89a3      	ldrh	r3, [r4, #12]
 800330a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800330e:	81a3      	strh	r3, [r4, #12]
 8003310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003314:	464a      	mov	r2, r9
 8003316:	6921      	ldr	r1, [r4, #16]
 8003318:	f000 face 	bl	80038b8 <memcpy>
 800331c:	89a3      	ldrh	r3, [r4, #12]
 800331e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003326:	81a3      	strh	r3, [r4, #12]
 8003328:	6126      	str	r6, [r4, #16]
 800332a:	444e      	add	r6, r9
 800332c:	6026      	str	r6, [r4, #0]
 800332e:	463e      	mov	r6, r7
 8003330:	6165      	str	r5, [r4, #20]
 8003332:	eba5 0509 	sub.w	r5, r5, r9
 8003336:	60a5      	str	r5, [r4, #8]
 8003338:	42be      	cmp	r6, r7
 800333a:	d900      	bls.n	800333e <__ssputs_r+0x86>
 800333c:	463e      	mov	r6, r7
 800333e:	4632      	mov	r2, r6
 8003340:	4641      	mov	r1, r8
 8003342:	6820      	ldr	r0, [r4, #0]
 8003344:	f000 fac6 	bl	80038d4 <memmove>
 8003348:	68a3      	ldr	r3, [r4, #8]
 800334a:	2000      	movs	r0, #0
 800334c:	1b9b      	subs	r3, r3, r6
 800334e:	60a3      	str	r3, [r4, #8]
 8003350:	6823      	ldr	r3, [r4, #0]
 8003352:	4433      	add	r3, r6
 8003354:	6023      	str	r3, [r4, #0]
 8003356:	e7db      	b.n	8003310 <__ssputs_r+0x58>
 8003358:	462a      	mov	r2, r5
 800335a:	f000 fbb1 	bl	8003ac0 <_realloc_r>
 800335e:	4606      	mov	r6, r0
 8003360:	2800      	cmp	r0, #0
 8003362:	d1e1      	bne.n	8003328 <__ssputs_r+0x70>
 8003364:	4650      	mov	r0, sl
 8003366:	6921      	ldr	r1, [r4, #16]
 8003368:	f000 face 	bl	8003908 <_free_r>
 800336c:	e7c7      	b.n	80032fe <__ssputs_r+0x46>
	...

08003370 <_svfiprintf_r>:
 8003370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003374:	4698      	mov	r8, r3
 8003376:	898b      	ldrh	r3, [r1, #12]
 8003378:	4607      	mov	r7, r0
 800337a:	061b      	lsls	r3, r3, #24
 800337c:	460d      	mov	r5, r1
 800337e:	4614      	mov	r4, r2
 8003380:	b09d      	sub	sp, #116	; 0x74
 8003382:	d50e      	bpl.n	80033a2 <_svfiprintf_r+0x32>
 8003384:	690b      	ldr	r3, [r1, #16]
 8003386:	b963      	cbnz	r3, 80033a2 <_svfiprintf_r+0x32>
 8003388:	2140      	movs	r1, #64	; 0x40
 800338a:	f000 fb25 	bl	80039d8 <_malloc_r>
 800338e:	6028      	str	r0, [r5, #0]
 8003390:	6128      	str	r0, [r5, #16]
 8003392:	b920      	cbnz	r0, 800339e <_svfiprintf_r+0x2e>
 8003394:	230c      	movs	r3, #12
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	f04f 30ff 	mov.w	r0, #4294967295
 800339c:	e0d1      	b.n	8003542 <_svfiprintf_r+0x1d2>
 800339e:	2340      	movs	r3, #64	; 0x40
 80033a0:	616b      	str	r3, [r5, #20]
 80033a2:	2300      	movs	r3, #0
 80033a4:	9309      	str	r3, [sp, #36]	; 0x24
 80033a6:	2320      	movs	r3, #32
 80033a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033ac:	2330      	movs	r3, #48	; 0x30
 80033ae:	f04f 0901 	mov.w	r9, #1
 80033b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80033b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800355c <_svfiprintf_r+0x1ec>
 80033ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033be:	4623      	mov	r3, r4
 80033c0:	469a      	mov	sl, r3
 80033c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033c6:	b10a      	cbz	r2, 80033cc <_svfiprintf_r+0x5c>
 80033c8:	2a25      	cmp	r2, #37	; 0x25
 80033ca:	d1f9      	bne.n	80033c0 <_svfiprintf_r+0x50>
 80033cc:	ebba 0b04 	subs.w	fp, sl, r4
 80033d0:	d00b      	beq.n	80033ea <_svfiprintf_r+0x7a>
 80033d2:	465b      	mov	r3, fp
 80033d4:	4622      	mov	r2, r4
 80033d6:	4629      	mov	r1, r5
 80033d8:	4638      	mov	r0, r7
 80033da:	f7ff ff6d 	bl	80032b8 <__ssputs_r>
 80033de:	3001      	adds	r0, #1
 80033e0:	f000 80aa 	beq.w	8003538 <_svfiprintf_r+0x1c8>
 80033e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033e6:	445a      	add	r2, fp
 80033e8:	9209      	str	r2, [sp, #36]	; 0x24
 80033ea:	f89a 3000 	ldrb.w	r3, [sl]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 80a2 	beq.w	8003538 <_svfiprintf_r+0x1c8>
 80033f4:	2300      	movs	r3, #0
 80033f6:	f04f 32ff 	mov.w	r2, #4294967295
 80033fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033fe:	f10a 0a01 	add.w	sl, sl, #1
 8003402:	9304      	str	r3, [sp, #16]
 8003404:	9307      	str	r3, [sp, #28]
 8003406:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800340a:	931a      	str	r3, [sp, #104]	; 0x68
 800340c:	4654      	mov	r4, sl
 800340e:	2205      	movs	r2, #5
 8003410:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003414:	4851      	ldr	r0, [pc, #324]	; (800355c <_svfiprintf_r+0x1ec>)
 8003416:	f000 fa41 	bl	800389c <memchr>
 800341a:	9a04      	ldr	r2, [sp, #16]
 800341c:	b9d8      	cbnz	r0, 8003456 <_svfiprintf_r+0xe6>
 800341e:	06d0      	lsls	r0, r2, #27
 8003420:	bf44      	itt	mi
 8003422:	2320      	movmi	r3, #32
 8003424:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003428:	0711      	lsls	r1, r2, #28
 800342a:	bf44      	itt	mi
 800342c:	232b      	movmi	r3, #43	; 0x2b
 800342e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003432:	f89a 3000 	ldrb.w	r3, [sl]
 8003436:	2b2a      	cmp	r3, #42	; 0x2a
 8003438:	d015      	beq.n	8003466 <_svfiprintf_r+0xf6>
 800343a:	4654      	mov	r4, sl
 800343c:	2000      	movs	r0, #0
 800343e:	f04f 0c0a 	mov.w	ip, #10
 8003442:	9a07      	ldr	r2, [sp, #28]
 8003444:	4621      	mov	r1, r4
 8003446:	f811 3b01 	ldrb.w	r3, [r1], #1
 800344a:	3b30      	subs	r3, #48	; 0x30
 800344c:	2b09      	cmp	r3, #9
 800344e:	d94e      	bls.n	80034ee <_svfiprintf_r+0x17e>
 8003450:	b1b0      	cbz	r0, 8003480 <_svfiprintf_r+0x110>
 8003452:	9207      	str	r2, [sp, #28]
 8003454:	e014      	b.n	8003480 <_svfiprintf_r+0x110>
 8003456:	eba0 0308 	sub.w	r3, r0, r8
 800345a:	fa09 f303 	lsl.w	r3, r9, r3
 800345e:	4313      	orrs	r3, r2
 8003460:	46a2      	mov	sl, r4
 8003462:	9304      	str	r3, [sp, #16]
 8003464:	e7d2      	b.n	800340c <_svfiprintf_r+0x9c>
 8003466:	9b03      	ldr	r3, [sp, #12]
 8003468:	1d19      	adds	r1, r3, #4
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	9103      	str	r1, [sp, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	bfbb      	ittet	lt
 8003472:	425b      	neglt	r3, r3
 8003474:	f042 0202 	orrlt.w	r2, r2, #2
 8003478:	9307      	strge	r3, [sp, #28]
 800347a:	9307      	strlt	r3, [sp, #28]
 800347c:	bfb8      	it	lt
 800347e:	9204      	strlt	r2, [sp, #16]
 8003480:	7823      	ldrb	r3, [r4, #0]
 8003482:	2b2e      	cmp	r3, #46	; 0x2e
 8003484:	d10c      	bne.n	80034a0 <_svfiprintf_r+0x130>
 8003486:	7863      	ldrb	r3, [r4, #1]
 8003488:	2b2a      	cmp	r3, #42	; 0x2a
 800348a:	d135      	bne.n	80034f8 <_svfiprintf_r+0x188>
 800348c:	9b03      	ldr	r3, [sp, #12]
 800348e:	3402      	adds	r4, #2
 8003490:	1d1a      	adds	r2, r3, #4
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	9203      	str	r2, [sp, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	bfb8      	it	lt
 800349a:	f04f 33ff 	movlt.w	r3, #4294967295
 800349e:	9305      	str	r3, [sp, #20]
 80034a0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003560 <_svfiprintf_r+0x1f0>
 80034a4:	2203      	movs	r2, #3
 80034a6:	4650      	mov	r0, sl
 80034a8:	7821      	ldrb	r1, [r4, #0]
 80034aa:	f000 f9f7 	bl	800389c <memchr>
 80034ae:	b140      	cbz	r0, 80034c2 <_svfiprintf_r+0x152>
 80034b0:	2340      	movs	r3, #64	; 0x40
 80034b2:	eba0 000a 	sub.w	r0, r0, sl
 80034b6:	fa03 f000 	lsl.w	r0, r3, r0
 80034ba:	9b04      	ldr	r3, [sp, #16]
 80034bc:	3401      	adds	r4, #1
 80034be:	4303      	orrs	r3, r0
 80034c0:	9304      	str	r3, [sp, #16]
 80034c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034c6:	2206      	movs	r2, #6
 80034c8:	4826      	ldr	r0, [pc, #152]	; (8003564 <_svfiprintf_r+0x1f4>)
 80034ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034ce:	f000 f9e5 	bl	800389c <memchr>
 80034d2:	2800      	cmp	r0, #0
 80034d4:	d038      	beq.n	8003548 <_svfiprintf_r+0x1d8>
 80034d6:	4b24      	ldr	r3, [pc, #144]	; (8003568 <_svfiprintf_r+0x1f8>)
 80034d8:	bb1b      	cbnz	r3, 8003522 <_svfiprintf_r+0x1b2>
 80034da:	9b03      	ldr	r3, [sp, #12]
 80034dc:	3307      	adds	r3, #7
 80034de:	f023 0307 	bic.w	r3, r3, #7
 80034e2:	3308      	adds	r3, #8
 80034e4:	9303      	str	r3, [sp, #12]
 80034e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034e8:	4433      	add	r3, r6
 80034ea:	9309      	str	r3, [sp, #36]	; 0x24
 80034ec:	e767      	b.n	80033be <_svfiprintf_r+0x4e>
 80034ee:	460c      	mov	r4, r1
 80034f0:	2001      	movs	r0, #1
 80034f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80034f6:	e7a5      	b.n	8003444 <_svfiprintf_r+0xd4>
 80034f8:	2300      	movs	r3, #0
 80034fa:	f04f 0c0a 	mov.w	ip, #10
 80034fe:	4619      	mov	r1, r3
 8003500:	3401      	adds	r4, #1
 8003502:	9305      	str	r3, [sp, #20]
 8003504:	4620      	mov	r0, r4
 8003506:	f810 2b01 	ldrb.w	r2, [r0], #1
 800350a:	3a30      	subs	r2, #48	; 0x30
 800350c:	2a09      	cmp	r2, #9
 800350e:	d903      	bls.n	8003518 <_svfiprintf_r+0x1a8>
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0c5      	beq.n	80034a0 <_svfiprintf_r+0x130>
 8003514:	9105      	str	r1, [sp, #20]
 8003516:	e7c3      	b.n	80034a0 <_svfiprintf_r+0x130>
 8003518:	4604      	mov	r4, r0
 800351a:	2301      	movs	r3, #1
 800351c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003520:	e7f0      	b.n	8003504 <_svfiprintf_r+0x194>
 8003522:	ab03      	add	r3, sp, #12
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	462a      	mov	r2, r5
 8003528:	4638      	mov	r0, r7
 800352a:	4b10      	ldr	r3, [pc, #64]	; (800356c <_svfiprintf_r+0x1fc>)
 800352c:	a904      	add	r1, sp, #16
 800352e:	f3af 8000 	nop.w
 8003532:	1c42      	adds	r2, r0, #1
 8003534:	4606      	mov	r6, r0
 8003536:	d1d6      	bne.n	80034e6 <_svfiprintf_r+0x176>
 8003538:	89ab      	ldrh	r3, [r5, #12]
 800353a:	065b      	lsls	r3, r3, #25
 800353c:	f53f af2c 	bmi.w	8003398 <_svfiprintf_r+0x28>
 8003540:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003542:	b01d      	add	sp, #116	; 0x74
 8003544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003548:	ab03      	add	r3, sp, #12
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	462a      	mov	r2, r5
 800354e:	4638      	mov	r0, r7
 8003550:	4b06      	ldr	r3, [pc, #24]	; (800356c <_svfiprintf_r+0x1fc>)
 8003552:	a904      	add	r1, sp, #16
 8003554:	f000 f87c 	bl	8003650 <_printf_i>
 8003558:	e7eb      	b.n	8003532 <_svfiprintf_r+0x1c2>
 800355a:	bf00      	nop
 800355c:	080050a0 	.word	0x080050a0
 8003560:	080050a6 	.word	0x080050a6
 8003564:	080050aa 	.word	0x080050aa
 8003568:	00000000 	.word	0x00000000
 800356c:	080032b9 	.word	0x080032b9

08003570 <_printf_common>:
 8003570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003574:	4616      	mov	r6, r2
 8003576:	4699      	mov	r9, r3
 8003578:	688a      	ldr	r2, [r1, #8]
 800357a:	690b      	ldr	r3, [r1, #16]
 800357c:	4607      	mov	r7, r0
 800357e:	4293      	cmp	r3, r2
 8003580:	bfb8      	it	lt
 8003582:	4613      	movlt	r3, r2
 8003584:	6033      	str	r3, [r6, #0]
 8003586:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800358a:	460c      	mov	r4, r1
 800358c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003590:	b10a      	cbz	r2, 8003596 <_printf_common+0x26>
 8003592:	3301      	adds	r3, #1
 8003594:	6033      	str	r3, [r6, #0]
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	0699      	lsls	r1, r3, #26
 800359a:	bf42      	ittt	mi
 800359c:	6833      	ldrmi	r3, [r6, #0]
 800359e:	3302      	addmi	r3, #2
 80035a0:	6033      	strmi	r3, [r6, #0]
 80035a2:	6825      	ldr	r5, [r4, #0]
 80035a4:	f015 0506 	ands.w	r5, r5, #6
 80035a8:	d106      	bne.n	80035b8 <_printf_common+0x48>
 80035aa:	f104 0a19 	add.w	sl, r4, #25
 80035ae:	68e3      	ldr	r3, [r4, #12]
 80035b0:	6832      	ldr	r2, [r6, #0]
 80035b2:	1a9b      	subs	r3, r3, r2
 80035b4:	42ab      	cmp	r3, r5
 80035b6:	dc28      	bgt.n	800360a <_printf_common+0x9a>
 80035b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035bc:	1e13      	subs	r3, r2, #0
 80035be:	6822      	ldr	r2, [r4, #0]
 80035c0:	bf18      	it	ne
 80035c2:	2301      	movne	r3, #1
 80035c4:	0692      	lsls	r2, r2, #26
 80035c6:	d42d      	bmi.n	8003624 <_printf_common+0xb4>
 80035c8:	4649      	mov	r1, r9
 80035ca:	4638      	mov	r0, r7
 80035cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035d0:	47c0      	blx	r8
 80035d2:	3001      	adds	r0, #1
 80035d4:	d020      	beq.n	8003618 <_printf_common+0xa8>
 80035d6:	6823      	ldr	r3, [r4, #0]
 80035d8:	68e5      	ldr	r5, [r4, #12]
 80035da:	f003 0306 	and.w	r3, r3, #6
 80035de:	2b04      	cmp	r3, #4
 80035e0:	bf18      	it	ne
 80035e2:	2500      	movne	r5, #0
 80035e4:	6832      	ldr	r2, [r6, #0]
 80035e6:	f04f 0600 	mov.w	r6, #0
 80035ea:	68a3      	ldr	r3, [r4, #8]
 80035ec:	bf08      	it	eq
 80035ee:	1aad      	subeq	r5, r5, r2
 80035f0:	6922      	ldr	r2, [r4, #16]
 80035f2:	bf08      	it	eq
 80035f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035f8:	4293      	cmp	r3, r2
 80035fa:	bfc4      	itt	gt
 80035fc:	1a9b      	subgt	r3, r3, r2
 80035fe:	18ed      	addgt	r5, r5, r3
 8003600:	341a      	adds	r4, #26
 8003602:	42b5      	cmp	r5, r6
 8003604:	d11a      	bne.n	800363c <_printf_common+0xcc>
 8003606:	2000      	movs	r0, #0
 8003608:	e008      	b.n	800361c <_printf_common+0xac>
 800360a:	2301      	movs	r3, #1
 800360c:	4652      	mov	r2, sl
 800360e:	4649      	mov	r1, r9
 8003610:	4638      	mov	r0, r7
 8003612:	47c0      	blx	r8
 8003614:	3001      	adds	r0, #1
 8003616:	d103      	bne.n	8003620 <_printf_common+0xb0>
 8003618:	f04f 30ff 	mov.w	r0, #4294967295
 800361c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003620:	3501      	adds	r5, #1
 8003622:	e7c4      	b.n	80035ae <_printf_common+0x3e>
 8003624:	2030      	movs	r0, #48	; 0x30
 8003626:	18e1      	adds	r1, r4, r3
 8003628:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003632:	4422      	add	r2, r4
 8003634:	3302      	adds	r3, #2
 8003636:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800363a:	e7c5      	b.n	80035c8 <_printf_common+0x58>
 800363c:	2301      	movs	r3, #1
 800363e:	4622      	mov	r2, r4
 8003640:	4649      	mov	r1, r9
 8003642:	4638      	mov	r0, r7
 8003644:	47c0      	blx	r8
 8003646:	3001      	adds	r0, #1
 8003648:	d0e6      	beq.n	8003618 <_printf_common+0xa8>
 800364a:	3601      	adds	r6, #1
 800364c:	e7d9      	b.n	8003602 <_printf_common+0x92>
	...

08003650 <_printf_i>:
 8003650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003654:	7e0f      	ldrb	r7, [r1, #24]
 8003656:	4691      	mov	r9, r2
 8003658:	2f78      	cmp	r7, #120	; 0x78
 800365a:	4680      	mov	r8, r0
 800365c:	460c      	mov	r4, r1
 800365e:	469a      	mov	sl, r3
 8003660:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003662:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003666:	d807      	bhi.n	8003678 <_printf_i+0x28>
 8003668:	2f62      	cmp	r7, #98	; 0x62
 800366a:	d80a      	bhi.n	8003682 <_printf_i+0x32>
 800366c:	2f00      	cmp	r7, #0
 800366e:	f000 80d9 	beq.w	8003824 <_printf_i+0x1d4>
 8003672:	2f58      	cmp	r7, #88	; 0x58
 8003674:	f000 80a4 	beq.w	80037c0 <_printf_i+0x170>
 8003678:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800367c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003680:	e03a      	b.n	80036f8 <_printf_i+0xa8>
 8003682:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003686:	2b15      	cmp	r3, #21
 8003688:	d8f6      	bhi.n	8003678 <_printf_i+0x28>
 800368a:	a101      	add	r1, pc, #4	; (adr r1, 8003690 <_printf_i+0x40>)
 800368c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003690:	080036e9 	.word	0x080036e9
 8003694:	080036fd 	.word	0x080036fd
 8003698:	08003679 	.word	0x08003679
 800369c:	08003679 	.word	0x08003679
 80036a0:	08003679 	.word	0x08003679
 80036a4:	08003679 	.word	0x08003679
 80036a8:	080036fd 	.word	0x080036fd
 80036ac:	08003679 	.word	0x08003679
 80036b0:	08003679 	.word	0x08003679
 80036b4:	08003679 	.word	0x08003679
 80036b8:	08003679 	.word	0x08003679
 80036bc:	0800380b 	.word	0x0800380b
 80036c0:	0800372d 	.word	0x0800372d
 80036c4:	080037ed 	.word	0x080037ed
 80036c8:	08003679 	.word	0x08003679
 80036cc:	08003679 	.word	0x08003679
 80036d0:	0800382d 	.word	0x0800382d
 80036d4:	08003679 	.word	0x08003679
 80036d8:	0800372d 	.word	0x0800372d
 80036dc:	08003679 	.word	0x08003679
 80036e0:	08003679 	.word	0x08003679
 80036e4:	080037f5 	.word	0x080037f5
 80036e8:	682b      	ldr	r3, [r5, #0]
 80036ea:	1d1a      	adds	r2, r3, #4
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	602a      	str	r2, [r5, #0]
 80036f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0a4      	b.n	8003846 <_printf_i+0x1f6>
 80036fc:	6820      	ldr	r0, [r4, #0]
 80036fe:	6829      	ldr	r1, [r5, #0]
 8003700:	0606      	lsls	r6, r0, #24
 8003702:	f101 0304 	add.w	r3, r1, #4
 8003706:	d50a      	bpl.n	800371e <_printf_i+0xce>
 8003708:	680e      	ldr	r6, [r1, #0]
 800370a:	602b      	str	r3, [r5, #0]
 800370c:	2e00      	cmp	r6, #0
 800370e:	da03      	bge.n	8003718 <_printf_i+0xc8>
 8003710:	232d      	movs	r3, #45	; 0x2d
 8003712:	4276      	negs	r6, r6
 8003714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003718:	230a      	movs	r3, #10
 800371a:	485e      	ldr	r0, [pc, #376]	; (8003894 <_printf_i+0x244>)
 800371c:	e019      	b.n	8003752 <_printf_i+0x102>
 800371e:	680e      	ldr	r6, [r1, #0]
 8003720:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003724:	602b      	str	r3, [r5, #0]
 8003726:	bf18      	it	ne
 8003728:	b236      	sxthne	r6, r6
 800372a:	e7ef      	b.n	800370c <_printf_i+0xbc>
 800372c:	682b      	ldr	r3, [r5, #0]
 800372e:	6820      	ldr	r0, [r4, #0]
 8003730:	1d19      	adds	r1, r3, #4
 8003732:	6029      	str	r1, [r5, #0]
 8003734:	0601      	lsls	r1, r0, #24
 8003736:	d501      	bpl.n	800373c <_printf_i+0xec>
 8003738:	681e      	ldr	r6, [r3, #0]
 800373a:	e002      	b.n	8003742 <_printf_i+0xf2>
 800373c:	0646      	lsls	r6, r0, #25
 800373e:	d5fb      	bpl.n	8003738 <_printf_i+0xe8>
 8003740:	881e      	ldrh	r6, [r3, #0]
 8003742:	2f6f      	cmp	r7, #111	; 0x6f
 8003744:	bf0c      	ite	eq
 8003746:	2308      	moveq	r3, #8
 8003748:	230a      	movne	r3, #10
 800374a:	4852      	ldr	r0, [pc, #328]	; (8003894 <_printf_i+0x244>)
 800374c:	2100      	movs	r1, #0
 800374e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003752:	6865      	ldr	r5, [r4, #4]
 8003754:	2d00      	cmp	r5, #0
 8003756:	bfa8      	it	ge
 8003758:	6821      	ldrge	r1, [r4, #0]
 800375a:	60a5      	str	r5, [r4, #8]
 800375c:	bfa4      	itt	ge
 800375e:	f021 0104 	bicge.w	r1, r1, #4
 8003762:	6021      	strge	r1, [r4, #0]
 8003764:	b90e      	cbnz	r6, 800376a <_printf_i+0x11a>
 8003766:	2d00      	cmp	r5, #0
 8003768:	d04d      	beq.n	8003806 <_printf_i+0x1b6>
 800376a:	4615      	mov	r5, r2
 800376c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003770:	fb03 6711 	mls	r7, r3, r1, r6
 8003774:	5dc7      	ldrb	r7, [r0, r7]
 8003776:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800377a:	4637      	mov	r7, r6
 800377c:	42bb      	cmp	r3, r7
 800377e:	460e      	mov	r6, r1
 8003780:	d9f4      	bls.n	800376c <_printf_i+0x11c>
 8003782:	2b08      	cmp	r3, #8
 8003784:	d10b      	bne.n	800379e <_printf_i+0x14e>
 8003786:	6823      	ldr	r3, [r4, #0]
 8003788:	07de      	lsls	r6, r3, #31
 800378a:	d508      	bpl.n	800379e <_printf_i+0x14e>
 800378c:	6923      	ldr	r3, [r4, #16]
 800378e:	6861      	ldr	r1, [r4, #4]
 8003790:	4299      	cmp	r1, r3
 8003792:	bfde      	ittt	le
 8003794:	2330      	movle	r3, #48	; 0x30
 8003796:	f805 3c01 	strble.w	r3, [r5, #-1]
 800379a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800379e:	1b52      	subs	r2, r2, r5
 80037a0:	6122      	str	r2, [r4, #16]
 80037a2:	464b      	mov	r3, r9
 80037a4:	4621      	mov	r1, r4
 80037a6:	4640      	mov	r0, r8
 80037a8:	f8cd a000 	str.w	sl, [sp]
 80037ac:	aa03      	add	r2, sp, #12
 80037ae:	f7ff fedf 	bl	8003570 <_printf_common>
 80037b2:	3001      	adds	r0, #1
 80037b4:	d14c      	bne.n	8003850 <_printf_i+0x200>
 80037b6:	f04f 30ff 	mov.w	r0, #4294967295
 80037ba:	b004      	add	sp, #16
 80037bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037c0:	4834      	ldr	r0, [pc, #208]	; (8003894 <_printf_i+0x244>)
 80037c2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80037c6:	6829      	ldr	r1, [r5, #0]
 80037c8:	6823      	ldr	r3, [r4, #0]
 80037ca:	f851 6b04 	ldr.w	r6, [r1], #4
 80037ce:	6029      	str	r1, [r5, #0]
 80037d0:	061d      	lsls	r5, r3, #24
 80037d2:	d514      	bpl.n	80037fe <_printf_i+0x1ae>
 80037d4:	07df      	lsls	r7, r3, #31
 80037d6:	bf44      	itt	mi
 80037d8:	f043 0320 	orrmi.w	r3, r3, #32
 80037dc:	6023      	strmi	r3, [r4, #0]
 80037de:	b91e      	cbnz	r6, 80037e8 <_printf_i+0x198>
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	f023 0320 	bic.w	r3, r3, #32
 80037e6:	6023      	str	r3, [r4, #0]
 80037e8:	2310      	movs	r3, #16
 80037ea:	e7af      	b.n	800374c <_printf_i+0xfc>
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	f043 0320 	orr.w	r3, r3, #32
 80037f2:	6023      	str	r3, [r4, #0]
 80037f4:	2378      	movs	r3, #120	; 0x78
 80037f6:	4828      	ldr	r0, [pc, #160]	; (8003898 <_printf_i+0x248>)
 80037f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037fc:	e7e3      	b.n	80037c6 <_printf_i+0x176>
 80037fe:	0659      	lsls	r1, r3, #25
 8003800:	bf48      	it	mi
 8003802:	b2b6      	uxthmi	r6, r6
 8003804:	e7e6      	b.n	80037d4 <_printf_i+0x184>
 8003806:	4615      	mov	r5, r2
 8003808:	e7bb      	b.n	8003782 <_printf_i+0x132>
 800380a:	682b      	ldr	r3, [r5, #0]
 800380c:	6826      	ldr	r6, [r4, #0]
 800380e:	1d18      	adds	r0, r3, #4
 8003810:	6961      	ldr	r1, [r4, #20]
 8003812:	6028      	str	r0, [r5, #0]
 8003814:	0635      	lsls	r5, r6, #24
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	d501      	bpl.n	800381e <_printf_i+0x1ce>
 800381a:	6019      	str	r1, [r3, #0]
 800381c:	e002      	b.n	8003824 <_printf_i+0x1d4>
 800381e:	0670      	lsls	r0, r6, #25
 8003820:	d5fb      	bpl.n	800381a <_printf_i+0x1ca>
 8003822:	8019      	strh	r1, [r3, #0]
 8003824:	2300      	movs	r3, #0
 8003826:	4615      	mov	r5, r2
 8003828:	6123      	str	r3, [r4, #16]
 800382a:	e7ba      	b.n	80037a2 <_printf_i+0x152>
 800382c:	682b      	ldr	r3, [r5, #0]
 800382e:	2100      	movs	r1, #0
 8003830:	1d1a      	adds	r2, r3, #4
 8003832:	602a      	str	r2, [r5, #0]
 8003834:	681d      	ldr	r5, [r3, #0]
 8003836:	6862      	ldr	r2, [r4, #4]
 8003838:	4628      	mov	r0, r5
 800383a:	f000 f82f 	bl	800389c <memchr>
 800383e:	b108      	cbz	r0, 8003844 <_printf_i+0x1f4>
 8003840:	1b40      	subs	r0, r0, r5
 8003842:	6060      	str	r0, [r4, #4]
 8003844:	6863      	ldr	r3, [r4, #4]
 8003846:	6123      	str	r3, [r4, #16]
 8003848:	2300      	movs	r3, #0
 800384a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800384e:	e7a8      	b.n	80037a2 <_printf_i+0x152>
 8003850:	462a      	mov	r2, r5
 8003852:	4649      	mov	r1, r9
 8003854:	4640      	mov	r0, r8
 8003856:	6923      	ldr	r3, [r4, #16]
 8003858:	47d0      	blx	sl
 800385a:	3001      	adds	r0, #1
 800385c:	d0ab      	beq.n	80037b6 <_printf_i+0x166>
 800385e:	6823      	ldr	r3, [r4, #0]
 8003860:	079b      	lsls	r3, r3, #30
 8003862:	d413      	bmi.n	800388c <_printf_i+0x23c>
 8003864:	68e0      	ldr	r0, [r4, #12]
 8003866:	9b03      	ldr	r3, [sp, #12]
 8003868:	4298      	cmp	r0, r3
 800386a:	bfb8      	it	lt
 800386c:	4618      	movlt	r0, r3
 800386e:	e7a4      	b.n	80037ba <_printf_i+0x16a>
 8003870:	2301      	movs	r3, #1
 8003872:	4632      	mov	r2, r6
 8003874:	4649      	mov	r1, r9
 8003876:	4640      	mov	r0, r8
 8003878:	47d0      	blx	sl
 800387a:	3001      	adds	r0, #1
 800387c:	d09b      	beq.n	80037b6 <_printf_i+0x166>
 800387e:	3501      	adds	r5, #1
 8003880:	68e3      	ldr	r3, [r4, #12]
 8003882:	9903      	ldr	r1, [sp, #12]
 8003884:	1a5b      	subs	r3, r3, r1
 8003886:	42ab      	cmp	r3, r5
 8003888:	dcf2      	bgt.n	8003870 <_printf_i+0x220>
 800388a:	e7eb      	b.n	8003864 <_printf_i+0x214>
 800388c:	2500      	movs	r5, #0
 800388e:	f104 0619 	add.w	r6, r4, #25
 8003892:	e7f5      	b.n	8003880 <_printf_i+0x230>
 8003894:	080050b1 	.word	0x080050b1
 8003898:	080050c2 	.word	0x080050c2

0800389c <memchr>:
 800389c:	4603      	mov	r3, r0
 800389e:	b510      	push	{r4, lr}
 80038a0:	b2c9      	uxtb	r1, r1
 80038a2:	4402      	add	r2, r0
 80038a4:	4293      	cmp	r3, r2
 80038a6:	4618      	mov	r0, r3
 80038a8:	d101      	bne.n	80038ae <memchr+0x12>
 80038aa:	2000      	movs	r0, #0
 80038ac:	e003      	b.n	80038b6 <memchr+0x1a>
 80038ae:	7804      	ldrb	r4, [r0, #0]
 80038b0:	3301      	adds	r3, #1
 80038b2:	428c      	cmp	r4, r1
 80038b4:	d1f6      	bne.n	80038a4 <memchr+0x8>
 80038b6:	bd10      	pop	{r4, pc}

080038b8 <memcpy>:
 80038b8:	440a      	add	r2, r1
 80038ba:	4291      	cmp	r1, r2
 80038bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80038c0:	d100      	bne.n	80038c4 <memcpy+0xc>
 80038c2:	4770      	bx	lr
 80038c4:	b510      	push	{r4, lr}
 80038c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038ca:	4291      	cmp	r1, r2
 80038cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038d0:	d1f9      	bne.n	80038c6 <memcpy+0xe>
 80038d2:	bd10      	pop	{r4, pc}

080038d4 <memmove>:
 80038d4:	4288      	cmp	r0, r1
 80038d6:	b510      	push	{r4, lr}
 80038d8:	eb01 0402 	add.w	r4, r1, r2
 80038dc:	d902      	bls.n	80038e4 <memmove+0x10>
 80038de:	4284      	cmp	r4, r0
 80038e0:	4623      	mov	r3, r4
 80038e2:	d807      	bhi.n	80038f4 <memmove+0x20>
 80038e4:	1e43      	subs	r3, r0, #1
 80038e6:	42a1      	cmp	r1, r4
 80038e8:	d008      	beq.n	80038fc <memmove+0x28>
 80038ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038f2:	e7f8      	b.n	80038e6 <memmove+0x12>
 80038f4:	4601      	mov	r1, r0
 80038f6:	4402      	add	r2, r0
 80038f8:	428a      	cmp	r2, r1
 80038fa:	d100      	bne.n	80038fe <memmove+0x2a>
 80038fc:	bd10      	pop	{r4, pc}
 80038fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003902:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003906:	e7f7      	b.n	80038f8 <memmove+0x24>

08003908 <_free_r>:
 8003908:	b538      	push	{r3, r4, r5, lr}
 800390a:	4605      	mov	r5, r0
 800390c:	2900      	cmp	r1, #0
 800390e:	d040      	beq.n	8003992 <_free_r+0x8a>
 8003910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003914:	1f0c      	subs	r4, r1, #4
 8003916:	2b00      	cmp	r3, #0
 8003918:	bfb8      	it	lt
 800391a:	18e4      	addlt	r4, r4, r3
 800391c:	f000 f910 	bl	8003b40 <__malloc_lock>
 8003920:	4a1c      	ldr	r2, [pc, #112]	; (8003994 <_free_r+0x8c>)
 8003922:	6813      	ldr	r3, [r2, #0]
 8003924:	b933      	cbnz	r3, 8003934 <_free_r+0x2c>
 8003926:	6063      	str	r3, [r4, #4]
 8003928:	6014      	str	r4, [r2, #0]
 800392a:	4628      	mov	r0, r5
 800392c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003930:	f000 b90c 	b.w	8003b4c <__malloc_unlock>
 8003934:	42a3      	cmp	r3, r4
 8003936:	d908      	bls.n	800394a <_free_r+0x42>
 8003938:	6820      	ldr	r0, [r4, #0]
 800393a:	1821      	adds	r1, r4, r0
 800393c:	428b      	cmp	r3, r1
 800393e:	bf01      	itttt	eq
 8003940:	6819      	ldreq	r1, [r3, #0]
 8003942:	685b      	ldreq	r3, [r3, #4]
 8003944:	1809      	addeq	r1, r1, r0
 8003946:	6021      	streq	r1, [r4, #0]
 8003948:	e7ed      	b.n	8003926 <_free_r+0x1e>
 800394a:	461a      	mov	r2, r3
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	b10b      	cbz	r3, 8003954 <_free_r+0x4c>
 8003950:	42a3      	cmp	r3, r4
 8003952:	d9fa      	bls.n	800394a <_free_r+0x42>
 8003954:	6811      	ldr	r1, [r2, #0]
 8003956:	1850      	adds	r0, r2, r1
 8003958:	42a0      	cmp	r0, r4
 800395a:	d10b      	bne.n	8003974 <_free_r+0x6c>
 800395c:	6820      	ldr	r0, [r4, #0]
 800395e:	4401      	add	r1, r0
 8003960:	1850      	adds	r0, r2, r1
 8003962:	4283      	cmp	r3, r0
 8003964:	6011      	str	r1, [r2, #0]
 8003966:	d1e0      	bne.n	800392a <_free_r+0x22>
 8003968:	6818      	ldr	r0, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	4401      	add	r1, r0
 800396e:	6011      	str	r1, [r2, #0]
 8003970:	6053      	str	r3, [r2, #4]
 8003972:	e7da      	b.n	800392a <_free_r+0x22>
 8003974:	d902      	bls.n	800397c <_free_r+0x74>
 8003976:	230c      	movs	r3, #12
 8003978:	602b      	str	r3, [r5, #0]
 800397a:	e7d6      	b.n	800392a <_free_r+0x22>
 800397c:	6820      	ldr	r0, [r4, #0]
 800397e:	1821      	adds	r1, r4, r0
 8003980:	428b      	cmp	r3, r1
 8003982:	bf01      	itttt	eq
 8003984:	6819      	ldreq	r1, [r3, #0]
 8003986:	685b      	ldreq	r3, [r3, #4]
 8003988:	1809      	addeq	r1, r1, r0
 800398a:	6021      	streq	r1, [r4, #0]
 800398c:	6063      	str	r3, [r4, #4]
 800398e:	6054      	str	r4, [r2, #4]
 8003990:	e7cb      	b.n	800392a <_free_r+0x22>
 8003992:	bd38      	pop	{r3, r4, r5, pc}
 8003994:	200005a8 	.word	0x200005a8

08003998 <sbrk_aligned>:
 8003998:	b570      	push	{r4, r5, r6, lr}
 800399a:	4e0e      	ldr	r6, [pc, #56]	; (80039d4 <sbrk_aligned+0x3c>)
 800399c:	460c      	mov	r4, r1
 800399e:	6831      	ldr	r1, [r6, #0]
 80039a0:	4605      	mov	r5, r0
 80039a2:	b911      	cbnz	r1, 80039aa <sbrk_aligned+0x12>
 80039a4:	f000 f8bc 	bl	8003b20 <_sbrk_r>
 80039a8:	6030      	str	r0, [r6, #0]
 80039aa:	4621      	mov	r1, r4
 80039ac:	4628      	mov	r0, r5
 80039ae:	f000 f8b7 	bl	8003b20 <_sbrk_r>
 80039b2:	1c43      	adds	r3, r0, #1
 80039b4:	d00a      	beq.n	80039cc <sbrk_aligned+0x34>
 80039b6:	1cc4      	adds	r4, r0, #3
 80039b8:	f024 0403 	bic.w	r4, r4, #3
 80039bc:	42a0      	cmp	r0, r4
 80039be:	d007      	beq.n	80039d0 <sbrk_aligned+0x38>
 80039c0:	1a21      	subs	r1, r4, r0
 80039c2:	4628      	mov	r0, r5
 80039c4:	f000 f8ac 	bl	8003b20 <_sbrk_r>
 80039c8:	3001      	adds	r0, #1
 80039ca:	d101      	bne.n	80039d0 <sbrk_aligned+0x38>
 80039cc:	f04f 34ff 	mov.w	r4, #4294967295
 80039d0:	4620      	mov	r0, r4
 80039d2:	bd70      	pop	{r4, r5, r6, pc}
 80039d4:	200005ac 	.word	0x200005ac

080039d8 <_malloc_r>:
 80039d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039dc:	1ccd      	adds	r5, r1, #3
 80039de:	f025 0503 	bic.w	r5, r5, #3
 80039e2:	3508      	adds	r5, #8
 80039e4:	2d0c      	cmp	r5, #12
 80039e6:	bf38      	it	cc
 80039e8:	250c      	movcc	r5, #12
 80039ea:	2d00      	cmp	r5, #0
 80039ec:	4607      	mov	r7, r0
 80039ee:	db01      	blt.n	80039f4 <_malloc_r+0x1c>
 80039f0:	42a9      	cmp	r1, r5
 80039f2:	d905      	bls.n	8003a00 <_malloc_r+0x28>
 80039f4:	230c      	movs	r3, #12
 80039f6:	2600      	movs	r6, #0
 80039f8:	603b      	str	r3, [r7, #0]
 80039fa:	4630      	mov	r0, r6
 80039fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a00:	4e2e      	ldr	r6, [pc, #184]	; (8003abc <_malloc_r+0xe4>)
 8003a02:	f000 f89d 	bl	8003b40 <__malloc_lock>
 8003a06:	6833      	ldr	r3, [r6, #0]
 8003a08:	461c      	mov	r4, r3
 8003a0a:	bb34      	cbnz	r4, 8003a5a <_malloc_r+0x82>
 8003a0c:	4629      	mov	r1, r5
 8003a0e:	4638      	mov	r0, r7
 8003a10:	f7ff ffc2 	bl	8003998 <sbrk_aligned>
 8003a14:	1c43      	adds	r3, r0, #1
 8003a16:	4604      	mov	r4, r0
 8003a18:	d14d      	bne.n	8003ab6 <_malloc_r+0xde>
 8003a1a:	6834      	ldr	r4, [r6, #0]
 8003a1c:	4626      	mov	r6, r4
 8003a1e:	2e00      	cmp	r6, #0
 8003a20:	d140      	bne.n	8003aa4 <_malloc_r+0xcc>
 8003a22:	6823      	ldr	r3, [r4, #0]
 8003a24:	4631      	mov	r1, r6
 8003a26:	4638      	mov	r0, r7
 8003a28:	eb04 0803 	add.w	r8, r4, r3
 8003a2c:	f000 f878 	bl	8003b20 <_sbrk_r>
 8003a30:	4580      	cmp	r8, r0
 8003a32:	d13a      	bne.n	8003aaa <_malloc_r+0xd2>
 8003a34:	6821      	ldr	r1, [r4, #0]
 8003a36:	3503      	adds	r5, #3
 8003a38:	1a6d      	subs	r5, r5, r1
 8003a3a:	f025 0503 	bic.w	r5, r5, #3
 8003a3e:	3508      	adds	r5, #8
 8003a40:	2d0c      	cmp	r5, #12
 8003a42:	bf38      	it	cc
 8003a44:	250c      	movcc	r5, #12
 8003a46:	4638      	mov	r0, r7
 8003a48:	4629      	mov	r1, r5
 8003a4a:	f7ff ffa5 	bl	8003998 <sbrk_aligned>
 8003a4e:	3001      	adds	r0, #1
 8003a50:	d02b      	beq.n	8003aaa <_malloc_r+0xd2>
 8003a52:	6823      	ldr	r3, [r4, #0]
 8003a54:	442b      	add	r3, r5
 8003a56:	6023      	str	r3, [r4, #0]
 8003a58:	e00e      	b.n	8003a78 <_malloc_r+0xa0>
 8003a5a:	6822      	ldr	r2, [r4, #0]
 8003a5c:	1b52      	subs	r2, r2, r5
 8003a5e:	d41e      	bmi.n	8003a9e <_malloc_r+0xc6>
 8003a60:	2a0b      	cmp	r2, #11
 8003a62:	d916      	bls.n	8003a92 <_malloc_r+0xba>
 8003a64:	1961      	adds	r1, r4, r5
 8003a66:	42a3      	cmp	r3, r4
 8003a68:	6025      	str	r5, [r4, #0]
 8003a6a:	bf18      	it	ne
 8003a6c:	6059      	strne	r1, [r3, #4]
 8003a6e:	6863      	ldr	r3, [r4, #4]
 8003a70:	bf08      	it	eq
 8003a72:	6031      	streq	r1, [r6, #0]
 8003a74:	5162      	str	r2, [r4, r5]
 8003a76:	604b      	str	r3, [r1, #4]
 8003a78:	4638      	mov	r0, r7
 8003a7a:	f104 060b 	add.w	r6, r4, #11
 8003a7e:	f000 f865 	bl	8003b4c <__malloc_unlock>
 8003a82:	f026 0607 	bic.w	r6, r6, #7
 8003a86:	1d23      	adds	r3, r4, #4
 8003a88:	1af2      	subs	r2, r6, r3
 8003a8a:	d0b6      	beq.n	80039fa <_malloc_r+0x22>
 8003a8c:	1b9b      	subs	r3, r3, r6
 8003a8e:	50a3      	str	r3, [r4, r2]
 8003a90:	e7b3      	b.n	80039fa <_malloc_r+0x22>
 8003a92:	6862      	ldr	r2, [r4, #4]
 8003a94:	42a3      	cmp	r3, r4
 8003a96:	bf0c      	ite	eq
 8003a98:	6032      	streq	r2, [r6, #0]
 8003a9a:	605a      	strne	r2, [r3, #4]
 8003a9c:	e7ec      	b.n	8003a78 <_malloc_r+0xa0>
 8003a9e:	4623      	mov	r3, r4
 8003aa0:	6864      	ldr	r4, [r4, #4]
 8003aa2:	e7b2      	b.n	8003a0a <_malloc_r+0x32>
 8003aa4:	4634      	mov	r4, r6
 8003aa6:	6876      	ldr	r6, [r6, #4]
 8003aa8:	e7b9      	b.n	8003a1e <_malloc_r+0x46>
 8003aaa:	230c      	movs	r3, #12
 8003aac:	4638      	mov	r0, r7
 8003aae:	603b      	str	r3, [r7, #0]
 8003ab0:	f000 f84c 	bl	8003b4c <__malloc_unlock>
 8003ab4:	e7a1      	b.n	80039fa <_malloc_r+0x22>
 8003ab6:	6025      	str	r5, [r4, #0]
 8003ab8:	e7de      	b.n	8003a78 <_malloc_r+0xa0>
 8003aba:	bf00      	nop
 8003abc:	200005a8 	.word	0x200005a8

08003ac0 <_realloc_r>:
 8003ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ac4:	4680      	mov	r8, r0
 8003ac6:	4614      	mov	r4, r2
 8003ac8:	460e      	mov	r6, r1
 8003aca:	b921      	cbnz	r1, 8003ad6 <_realloc_r+0x16>
 8003acc:	4611      	mov	r1, r2
 8003ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ad2:	f7ff bf81 	b.w	80039d8 <_malloc_r>
 8003ad6:	b92a      	cbnz	r2, 8003ae4 <_realloc_r+0x24>
 8003ad8:	f7ff ff16 	bl	8003908 <_free_r>
 8003adc:	4625      	mov	r5, r4
 8003ade:	4628      	mov	r0, r5
 8003ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ae4:	f000 f838 	bl	8003b58 <_malloc_usable_size_r>
 8003ae8:	4284      	cmp	r4, r0
 8003aea:	4607      	mov	r7, r0
 8003aec:	d802      	bhi.n	8003af4 <_realloc_r+0x34>
 8003aee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003af2:	d812      	bhi.n	8003b1a <_realloc_r+0x5a>
 8003af4:	4621      	mov	r1, r4
 8003af6:	4640      	mov	r0, r8
 8003af8:	f7ff ff6e 	bl	80039d8 <_malloc_r>
 8003afc:	4605      	mov	r5, r0
 8003afe:	2800      	cmp	r0, #0
 8003b00:	d0ed      	beq.n	8003ade <_realloc_r+0x1e>
 8003b02:	42bc      	cmp	r4, r7
 8003b04:	4622      	mov	r2, r4
 8003b06:	4631      	mov	r1, r6
 8003b08:	bf28      	it	cs
 8003b0a:	463a      	movcs	r2, r7
 8003b0c:	f7ff fed4 	bl	80038b8 <memcpy>
 8003b10:	4631      	mov	r1, r6
 8003b12:	4640      	mov	r0, r8
 8003b14:	f7ff fef8 	bl	8003908 <_free_r>
 8003b18:	e7e1      	b.n	8003ade <_realloc_r+0x1e>
 8003b1a:	4635      	mov	r5, r6
 8003b1c:	e7df      	b.n	8003ade <_realloc_r+0x1e>
	...

08003b20 <_sbrk_r>:
 8003b20:	b538      	push	{r3, r4, r5, lr}
 8003b22:	2300      	movs	r3, #0
 8003b24:	4d05      	ldr	r5, [pc, #20]	; (8003b3c <_sbrk_r+0x1c>)
 8003b26:	4604      	mov	r4, r0
 8003b28:	4608      	mov	r0, r1
 8003b2a:	602b      	str	r3, [r5, #0]
 8003b2c:	f7fd fa20 	bl	8000f70 <_sbrk>
 8003b30:	1c43      	adds	r3, r0, #1
 8003b32:	d102      	bne.n	8003b3a <_sbrk_r+0x1a>
 8003b34:	682b      	ldr	r3, [r5, #0]
 8003b36:	b103      	cbz	r3, 8003b3a <_sbrk_r+0x1a>
 8003b38:	6023      	str	r3, [r4, #0]
 8003b3a:	bd38      	pop	{r3, r4, r5, pc}
 8003b3c:	200005b0 	.word	0x200005b0

08003b40 <__malloc_lock>:
 8003b40:	4801      	ldr	r0, [pc, #4]	; (8003b48 <__malloc_lock+0x8>)
 8003b42:	f000 b811 	b.w	8003b68 <__retarget_lock_acquire_recursive>
 8003b46:	bf00      	nop
 8003b48:	200005b4 	.word	0x200005b4

08003b4c <__malloc_unlock>:
 8003b4c:	4801      	ldr	r0, [pc, #4]	; (8003b54 <__malloc_unlock+0x8>)
 8003b4e:	f000 b80c 	b.w	8003b6a <__retarget_lock_release_recursive>
 8003b52:	bf00      	nop
 8003b54:	200005b4 	.word	0x200005b4

08003b58 <_malloc_usable_size_r>:
 8003b58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b5c:	1f18      	subs	r0, r3, #4
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	bfbc      	itt	lt
 8003b62:	580b      	ldrlt	r3, [r1, r0]
 8003b64:	18c0      	addlt	r0, r0, r3
 8003b66:	4770      	bx	lr

08003b68 <__retarget_lock_acquire_recursive>:
 8003b68:	4770      	bx	lr

08003b6a <__retarget_lock_release_recursive>:
 8003b6a:	4770      	bx	lr

08003b6c <_init>:
 8003b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6e:	bf00      	nop
 8003b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b72:	bc08      	pop	{r3}
 8003b74:	469e      	mov	lr, r3
 8003b76:	4770      	bx	lr

08003b78 <_fini>:
 8003b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7a:	bf00      	nop
 8003b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b7e:	bc08      	pop	{r3}
 8003b80:	469e      	mov	lr, r3
 8003b82:	4770      	bx	lr
